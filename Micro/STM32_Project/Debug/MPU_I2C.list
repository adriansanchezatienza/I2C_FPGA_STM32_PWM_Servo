
MPU_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006190  08006190  00016190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a8  080062a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000074  08006324  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006324  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000855b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014ec  00000000  00000000  000285ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020304  00000000  00000000  0002a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000720d  00000000  00000000  0004abe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c25f4  00000000  00000000  00051df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001143e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  00114460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006174 	.word	0x08006174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006174 	.word	0x08006174

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	f043 030c 	orr.w	r3, r3, #12
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f28:	f107 0208 	add.w	r2, r7, #8
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2304      	movs	r3, #4
 8000f32:	214e      	movs	r1, #78	; 0x4e
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <lcd_send_cmd+0x5c>)
 8000f36:	f001 fb59 	bl	80025ec <HAL_I2C_Master_Transmit>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000b4 	.word	0x200000b4

08000f48 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f023 030f 	bic.w	r3, r3, #15
 8000f58:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 030d 	orr.w	r3, r3, #13
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f043 0309 	orr.w	r3, r3, #9
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	f043 030d 	orr.w	r3, r3, #13
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	f043 0309 	orr.w	r3, r3, #9
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2304      	movs	r3, #4
 8000f92:	214e      	movs	r1, #78	; 0x4e
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <lcd_send_data+0x5c>)
 8000f96:	f001 fb29 	bl	80025ec <HAL_I2C_Master_Transmit>
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000b4 	.word	0x200000b4

08000fa8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <lcd_put_cur+0x16>
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d005      	beq.n	8000fc8 <lcd_put_cur+0x20>
 8000fbc:	e009      	b.n	8000fd2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	603b      	str	r3, [r7, #0]
            break;
 8000fc6:	e004      	b.n	8000fd2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fce:	603b      	str	r3, [r7, #0]
            break;
 8000fd0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff86 	bl	8000ee8 <lcd_send_cmd>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd_init>:


void lcd_init (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fe8:	2032      	movs	r0, #50	; 0x32
 8000fea:	f000 ff25 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fee:	2030      	movs	r0, #48	; 0x30
 8000ff0:	f7ff ff7a 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f000 ff1f 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ffa:	2030      	movs	r0, #48	; 0x30
 8000ffc:	f7ff ff74 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001000:	2001      	movs	r0, #1
 8001002:	f000 ff19 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001006:	2030      	movs	r0, #48	; 0x30
 8001008:	f7ff ff6e 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f000 ff13 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001012:	2020      	movs	r0, #32
 8001014:	f7ff ff68 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f000 ff0d 	bl	8001e38 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800101e:	2028      	movs	r0, #40	; 0x28
 8001020:	f7ff ff62 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 ff07 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800102a:	2008      	movs	r0, #8
 800102c:	f7ff ff5c 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f000 ff01 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff ff56 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 fefb 	bl	8001e38 <HAL_Delay>
	HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fef8 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001048:	2006      	movs	r0, #6
 800104a:	f7ff ff4d 	bl	8000ee8 <lcd_send_cmd>
	HAL_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fef2 	bl	8001e38 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001054:	200c      	movs	r0, #12
 8001056:	f7ff ff47 	bl	8000ee8 <lcd_send_cmd>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}

0800105e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001066:	e006      	b.n	8001076 <lcd_send_string+0x18>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff69 	bl	8000f48 <lcd_send_data>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f4      	bne.n	8001068 <lcd_send_string+0xa>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <MPU6050_Init>:

//Texto para la pantalla LCD
char* linea1LCD, *linea2LCD;

void MPU6050_Init (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// leemos el registro del dispositivo ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2301      	movs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2275      	movs	r2, #117	; 0x75
 80010a0:	21d0      	movs	r1, #208	; 0xd0
 80010a2:	4823      	ldr	r0, [pc, #140]	; (8001130 <MPU6050_Init+0xa8>)
 80010a4:	f001 fec0 	bl	8002e28 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 se devolverá si todo va bien
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b68      	cmp	r3, #104	; 0x68
 80010ac:	d13b      	bne.n	8001126 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B escribimos 0's para despertar al sensor
		Data = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	1dbb      	adds	r3, r7, #6
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	226b      	movs	r2, #107	; 0x6b
 80010c4:	21d0      	movs	r1, #208	; 0xd0
 80010c6:	481a      	ldr	r0, [pc, #104]	; (8001130 <MPU6050_Init+0xa8>)
 80010c8:	f001 fdb4 	bl	8002c34 <HAL_I2C_Mem_Write>

		// Data de salida 1KHz escribimos en SMPLRT_DIV register
		Data = 0x07;
 80010cc:	2307      	movs	r3, #7
 80010ce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2219      	movs	r2, #25
 80010e2:	21d0      	movs	r1, #208	; 0xd0
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <MPU6050_Init+0xa8>)
 80010e6:	f001 fda5 	bl	8002c34 <HAL_I2C_Mem_Write>

		// Configuramos el acelerometro en ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	221c      	movs	r2, #28
 8001100:	21d0      	movs	r1, #208	; 0xd0
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <MPU6050_Init+0xa8>)
 8001104:	f001 fd96 	bl	8002c34 <HAL_I2C_Mem_Write>

		// Configuramos el giroscopio GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8001108:	2300      	movs	r3, #0
 800110a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	221b      	movs	r2, #27
 800111e:	21d0      	movs	r1, #208	; 0xd0
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <MPU6050_Init+0xa8>)
 8001122:	f001 fd87 	bl	8002c34 <HAL_I2C_Mem_Write>
	}

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000108 	.word	0x20000108
 8001134:	00000000 	.word	0x00000000

08001138 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Leemos 6 BYTES de datos comenzando por ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2306      	movs	r3, #6
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	463b      	mov	r3, r7
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	488c      	ldr	r0, [pc, #560]	; (8001388 <MPU6050_Read_Accel+0x250>)
 8001156:	f001 fe67 	bl	8002e28 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800115a:	783b      	ldrb	r3, [r7, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <MPU6050_Read_Accel+0x254>)
 800116a:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800116c:	78bb      	ldrb	r3, [r7, #2]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b85      	ldr	r3, [pc, #532]	; (8001390 <MPU6050_Read_Accel+0x258>)
 800117c:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b81      	ldr	r3, [pc, #516]	; (8001394 <MPU6050_Read_Accel+0x25c>)
 800118e:	801a      	strh	r2, [r3, #0]
	/***Convertimos los valores crudos o RAW en aceleración en 'g'
	 * 	Tenemos que dividir de acuerdo a la escala seleccionada en FS_SEL
	 * 	Como hemos configura FS_SEL=0. Lo dividiremos entre 16384.0
	 ***/

	Ax = Accel_X_RAW/16384.0;
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <MPU6050_Read_Accel+0x254>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9bc 	bl	8000514 <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <MPU6050_Read_Accel+0x260>)
 80011a2:	f7ff fb4b 	bl	800083c <__aeabi_ddiv>
 80011a6:	4603      	mov	r3, r0
 80011a8:	460c      	mov	r4, r1
 80011aa:	4618      	mov	r0, r3
 80011ac:	4621      	mov	r1, r4
 80011ae:	f7ff fccb 	bl	8000b48 <__aeabi_d2f>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b79      	ldr	r3, [pc, #484]	; (800139c <MPU6050_Read_Accel+0x264>)
 80011b6:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 80011b8:	4b75      	ldr	r3, [pc, #468]	; (8001390 <MPU6050_Read_Accel+0x258>)
 80011ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9a8 	bl	8000514 <__aeabi_i2d>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b73      	ldr	r3, [pc, #460]	; (8001398 <MPU6050_Read_Accel+0x260>)
 80011ca:	f7ff fb37 	bl	800083c <__aeabi_ddiv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	4618      	mov	r0, r3
 80011d4:	4621      	mov	r1, r4
 80011d6:	f7ff fcb7 	bl	8000b48 <__aeabi_d2f>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b70      	ldr	r3, [pc, #448]	; (80013a0 <MPU6050_Read_Accel+0x268>)
 80011de:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <MPU6050_Read_Accel+0x25c>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f994 	bl	8000514 <__aeabi_i2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <MPU6050_Read_Accel+0x260>)
 80011f2:	f7ff fb23 	bl	800083c <__aeabi_ddiv>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4618      	mov	r0, r3
 80011fc:	4621      	mov	r1, r4
 80011fe:	f7ff fca3 	bl	8000b48 <__aeabi_d2f>
 8001202:	4602      	mov	r2, r0
 8001204:	4b67      	ldr	r3, [pc, #412]	; (80013a4 <MPU6050_Read_Accel+0x26c>)
 8001206:	601a      	str	r2, [r3, #0]


	Acc[1]=atan(-Ax/sqrt(pow(Ay,2)+pow(Az,2)))*RAD_A_DEG;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <MPU6050_Read_Accel+0x264>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	eef1 7a67 	vneg.f32	s15, s15
 8001212:	ee17 3a90 	vmov	r3, s15
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f98e 	bl	8000538 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <MPU6050_Read_Accel+0x268>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f987 	bl	8000538 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001378 <MPU6050_Read_Accel+0x240>
 8001232:	ec43 2b10 	vmov	d0, r2, r3
 8001236:	f003 fef9 	bl	800502c <pow>
 800123a:	ec59 8b10 	vmov	r8, r9, d0
 800123e:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <MPU6050_Read_Accel+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f978 	bl	8000538 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001378 <MPU6050_Read_Accel+0x240>
 8001250:	ec43 2b10 	vmov	d0, r2, r3
 8001254:	f003 feea 	bl	800502c <pow>
 8001258:	ec53 2b10 	vmov	r2, r3, d0
 800125c:	4640      	mov	r0, r8
 800125e:	4649      	mov	r1, r9
 8001260:	f7ff f80c 	bl	800027c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	ec43 2b17 	vmov	d7, r2, r3
 800126c:	eeb0 0a47 	vmov.f32	s0, s14
 8001270:	eef0 0a67 	vmov.f32	s1, s15
 8001274:	f004 f84a 	bl	800530c <sqrt>
 8001278:	ec53 2b10 	vmov	r2, r3, d0
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff fadc 	bl	800083c <__aeabi_ddiv>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	ec44 3b17 	vmov	d7, r3, r4
 800128c:	eeb0 0a47 	vmov.f32	s0, s14
 8001290:	eef0 0a67 	vmov.f32	s1, s15
 8001294:	f003 fd20 	bl	8004cd8 <atan>
 8001298:	ec51 0b10 	vmov	r0, r1, d0
 800129c:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <MPU6050_Read_Accel+0x248>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a1 	bl	80005e8 <__aeabi_dmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	4618      	mov	r0, r3
 80012ac:	4621      	mov	r1, r4
 80012ae:	f7ff fc4b 	bl	8000b48 <__aeabi_d2f>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <MPU6050_Read_Accel+0x270>)
 80012b6:	605a      	str	r2, [r3, #4]
	Acc[0]=atan(-Ay/sqrt(pow(Ax,2)+pow(Az,2)))*RAD_A_DEG;
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <MPU6050_Read_Accel+0x268>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	eef1 7a67 	vneg.f32	s15, s15
 80012c2:	ee17 3a90 	vmov	r3, s15
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f936 	bl	8000538 <__aeabi_f2d>
 80012cc:	4604      	mov	r4, r0
 80012ce:	460d      	mov	r5, r1
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <MPU6050_Read_Accel+0x264>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92f 	bl	8000538 <__aeabi_f2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001378 <MPU6050_Read_Accel+0x240>
 80012e2:	ec43 2b10 	vmov	d0, r2, r3
 80012e6:	f003 fea1 	bl	800502c <pow>
 80012ea:	ec59 8b10 	vmov	r8, r9, d0
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MPU6050_Read_Accel+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f920 	bl	8000538 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001378 <MPU6050_Read_Accel+0x240>
 8001300:	ec43 2b10 	vmov	d0, r2, r3
 8001304:	f003 fe92 	bl	800502c <pow>
 8001308:	ec53 2b10 	vmov	r2, r3, d0
 800130c:	4640      	mov	r0, r8
 800130e:	4649      	mov	r1, r9
 8001310:	f7fe ffb4 	bl	800027c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	ec43 2b17 	vmov	d7, r2, r3
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f003 fff2 	bl	800530c <sqrt>
 8001328:	ec53 2b10 	vmov	r2, r3, d0
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff fa84 	bl	800083c <__aeabi_ddiv>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	ec44 3b17 	vmov	d7, r3, r4
 800133c:	eeb0 0a47 	vmov.f32	s0, s14
 8001340:	eef0 0a67 	vmov.f32	s1, s15
 8001344:	f003 fcc8 	bl	8004cd8 <atan>
 8001348:	ec51 0b10 	vmov	r0, r1, d0
 800134c:	a30c      	add	r3, pc, #48	; (adr r3, 8001380 <MPU6050_Read_Accel+0x248>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f949 	bl	80005e8 <__aeabi_dmul>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	f7ff fbf3 	bl	8000b48 <__aeabi_d2f>
 8001362:	4602      	mov	r2, r0
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MPU6050_Read_Accel+0x270>)
 8001366:	601a      	str	r2, [r3, #0]

}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001372:	bf00      	nop
 8001374:	f3af 8000 	nop.w
 8001378:	00000000 	.word	0x00000000
 800137c:	40000000 	.word	0x40000000
 8001380:	1615ebfb 	.word	0x1615ebfb
 8001384:	404ca5dc 	.word	0x404ca5dc
 8001388:	20000108 	.word	0x20000108
 800138c:	20000090 	.word	0x20000090
 8001390:	20000092 	.word	0x20000092
 8001394:	20000094 	.word	0x20000094
 8001398:	40d00000 	.word	0x40d00000
 800139c:	200001c8 	.word	0x200001c8
 80013a0:	200001b8 	.word	0x200001b8
 80013a4:	200001d4 	.word	0x200001d4
 80013a8:	200001d8 	.word	0x200001d8
 80013ac:	00000000 	.word	0x00000000

080013b0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	uint8_t result=0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
	// Leemos 6 BYTES de datos comenzando por GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2306      	movs	r3, #6
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	2243      	movs	r2, #67	; 0x43
 80013ce:	21d0      	movs	r1, #208	; 0xd0
 80013d0:	4899      	ldr	r0, [pc, #612]	; (8001638 <MPU6050_Read_Gyro+0x288>)
 80013d2:	f001 fd29 	bl	8002e28 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80013d6:	7a3b      	ldrb	r3, [r7, #8]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7a7b      	ldrb	r3, [r7, #9]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	4b95      	ldr	r3, [pc, #596]	; (800163c <MPU6050_Read_Gyro+0x28c>)
 80013e6:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80013e8:	7abb      	ldrb	r3, [r7, #10]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b92      	ldr	r3, [pc, #584]	; (8001640 <MPU6050_Read_Gyro+0x290>)
 80013f8:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80013fa:	7b3b      	ldrb	r3, [r7, #12]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21a      	sxth	r2, r3
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b8e      	ldr	r3, [pc, #568]	; (8001644 <MPU6050_Read_Gyro+0x294>)
 800140a:	801a      	strh	r2, [r3, #0]
	/***Convertimos los valores crudos o RAW en dps (°/s)
		 * 	Tenemos que dividir de acuerdo a la escala seleccionada en FS_SEL
		 * 	Como hemos configurado FS_SEL=0. Lo dividiremos entre 131.0
		 ***/

	Gx = Gyro_X_RAW/131.0;
 800140c:	4b8b      	ldr	r3, [pc, #556]	; (800163c <MPU6050_Read_Gyro+0x28c>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f87e 	bl	8000514 <__aeabi_i2d>
 8001418:	a37f      	add	r3, pc, #508	; (adr r3, 8001618 <MPU6050_Read_Gyro+0x268>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff fa0d 	bl	800083c <__aeabi_ddiv>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	4618      	mov	r0, r3
 8001428:	4621      	mov	r1, r4
 800142a:	f7ff fb8d 	bl	8000b48 <__aeabi_d2f>
 800142e:	4602      	mov	r2, r0
 8001430:	4b85      	ldr	r3, [pc, #532]	; (8001648 <MPU6050_Read_Gyro+0x298>)
 8001432:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001434:	4b82      	ldr	r3, [pc, #520]	; (8001640 <MPU6050_Read_Gyro+0x290>)
 8001436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f86a 	bl	8000514 <__aeabi_i2d>
 8001440:	a375      	add	r3, pc, #468	; (adr r3, 8001618 <MPU6050_Read_Gyro+0x268>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f9f9 	bl	800083c <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff fb79 	bl	8000b48 <__aeabi_d2f>
 8001456:	4602      	mov	r2, r0
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <MPU6050_Read_Gyro+0x29c>)
 800145a:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 800145c:	4b79      	ldr	r3, [pc, #484]	; (8001644 <MPU6050_Read_Gyro+0x294>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f856 	bl	8000514 <__aeabi_i2d>
 8001468:	a36b      	add	r3, pc, #428	; (adr r3, 8001618 <MPU6050_Read_Gyro+0x268>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9e5 	bl	800083c <__aeabi_ddiv>
 8001472:	4603      	mov	r3, r0
 8001474:	460c      	mov	r4, r1
 8001476:	4618      	mov	r0, r3
 8001478:	4621      	mov	r1, r4
 800147a:	f7ff fb65 	bl	8000b48 <__aeabi_d2f>
 800147e:	4602      	mov	r2, r0
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <MPU6050_Read_Gyro+0x2a0>)
 8001482:	601a      	str	r2, [r3, #0]
	//Filtro paso Banda, 2% aceleración y 98% angulo, debería dar el giro
	Angle[0]=0.95*(Angle[0]+Gx*0.03)+0.05*Acc[0];
 8001484:	4b73      	ldr	r3, [pc, #460]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f855 	bl	8000538 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <MPU6050_Read_Gyro+0x298>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f84e 	bl	8000538 <__aeabi_f2d>
 800149c:	a360      	add	r3, pc, #384	; (adr r3, 8001620 <MPU6050_Read_Gyro+0x270>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f8a1 	bl	80005e8 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe fee5 	bl	800027c <__adddf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	a35b      	add	r3, pc, #364	; (adr r3, 8001628 <MPU6050_Read_Gyro+0x278>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f892 	bl	80005e8 <__aeabi_dmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4625      	mov	r5, r4
 80014ca:	461c      	mov	r4, r3
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <MPU6050_Read_Gyro+0x2a8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f831 	bl	8000538 <__aeabi_f2d>
 80014d6:	a356      	add	r3, pc, #344	; (adr r3, 8001630 <MPU6050_Read_Gyro+0x280>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f884 	bl	80005e8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7fe fec8 	bl	800027c <__adddf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	f7ff fb28 	bl	8000b48 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 80014fc:	601a      	str	r2, [r3, #0]
	Angle[1]=0.95*(Angle[1]+Gy*0.03)+0.05*Acc[1];
 80014fe:	4b55      	ldr	r3, [pc, #340]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f818 	bl	8000538 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <MPU6050_Read_Gyro+0x29c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f811 	bl	8000538 <__aeabi_f2d>
 8001516:	a342      	add	r3, pc, #264	; (adr r3, 8001620 <MPU6050_Read_Gyro+0x270>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f864 	bl	80005e8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7fe fea8 	bl	800027c <__adddf3>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	4618      	mov	r0, r3
 8001532:	4621      	mov	r1, r4
 8001534:	a33c      	add	r3, pc, #240	; (adr r3, 8001628 <MPU6050_Read_Gyro+0x278>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f855 	bl	80005e8 <__aeabi_dmul>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	4625      	mov	r5, r4
 8001544:	461c      	mov	r4, r3
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <MPU6050_Read_Gyro+0x2a8>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fff4 	bl	8000538 <__aeabi_f2d>
 8001550:	a337      	add	r3, pc, #220	; (adr r3, 8001630 <MPU6050_Read_Gyro+0x280>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f847 	bl	80005e8 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe fe8b 	bl	800027c <__adddf3>
 8001566:	4603      	mov	r3, r0
 8001568:	460c      	mov	r4, r1
 800156a:	4618      	mov	r0, r3
 800156c:	4621      	mov	r1, r4
 800156e:	f7ff faeb 	bl	8000b48 <__aeabi_d2f>
 8001572:	4602      	mov	r2, r0
 8001574:	4b37      	ldr	r3, [pc, #220]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 8001576:	605a      	str	r2, [r3, #4]
	//Convertimos los valores en enteros de 8 bits acotados a 255
	result=dato2send[1];
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	73fb      	strb	r3, [r7, #15]
	dato2send[0]=((Angle[0]+90)*250/180);
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001660 <MPU6050_Read_Gyro+0x2b0>
 8001588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001664 <MPU6050_Read_Gyro+0x2b4>
 8001590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001594:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001668 <MPU6050_Read_Gyro+0x2b8>
 8001598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80015a4:	793b      	ldrb	r3, [r7, #4]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015aa:	701a      	strb	r2, [r3, #0]
	dato2send[1]=((Angle[1]+90)*250/180);
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MPU6050_Read_Gyro+0x2a4>)
 80015ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001660 <MPU6050_Read_Gyro+0x2b0>
 80015b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ba:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001664 <MPU6050_Read_Gyro+0x2b4>
 80015be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001668 <MPU6050_Read_Gyro+0x2b8>
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80015d2:	793b      	ldrb	r3, [r7, #4]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015d8:	705a      	strb	r2, [r3, #1]


	if(abs(result-dato2send[1])>25)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015de:	7852      	ldrb	r2, [r2, #1]
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bfb8      	it	lt
 80015e6:	425b      	neglt	r3, r3
 80015e8:	2b19      	cmp	r3, #25
 80015ea:	dd02      	ble.n	80015f2 <MPU6050_Read_Gyro+0x242>
		dato2send[1]=result;
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	7053      	strb	r3, [r2, #1]

	if(dato2send[0]>250)
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2bfa      	cmp	r3, #250	; 0xfa
 80015f8:	d902      	bls.n	8001600 <MPU6050_Read_Gyro+0x250>
		dato2send[0]=250;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 80015fc:	22fa      	movs	r2, #250	; 0xfa
 80015fe:	701a      	strb	r2, [r3, #0]
	else if(dato2send[0]<0)
		dato2send[0]=0;

	if(dato2send[1]>250)
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2bfa      	cmp	r3, #250	; 0xfa
 8001606:	d902      	bls.n	800160e <MPU6050_Read_Gyro+0x25e>
			dato2send[1]=250;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MPU6050_Read_Gyro+0x2ac>)
 800160a:	22fa      	movs	r2, #250	; 0xfa
 800160c:	705a      	strb	r2, [r3, #1]
		else if(dato2send[1]<0)
			dato2send[1]=0;
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bdb0      	pop	{r4, r5, r7, pc}
 8001616:	bf00      	nop
 8001618:	00000000 	.word	0x00000000
 800161c:	40606000 	.word	0x40606000
 8001620:	eb851eb8 	.word	0xeb851eb8
 8001624:	3f9eb851 	.word	0x3f9eb851
 8001628:	66666666 	.word	0x66666666
 800162c:	3fee6666 	.word	0x3fee6666
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fa99999 	.word	0x3fa99999
 8001638:	20000108 	.word	0x20000108
 800163c:	20000096 	.word	0x20000096
 8001640:	20000098 	.word	0x20000098
 8001644:	2000009a 	.word	0x2000009a
 8001648:	200000b0 	.word	0x200000b0
 800164c:	200001c0 	.word	0x200001c0
 8001650:	200001e4 	.word	0x200001e4
 8001654:	200000a8 	.word	0x200000a8
 8001658:	200001d8 	.word	0x200001d8
 800165c:	200001c4 	.word	0x200001c4
 8001660:	42b40000 	.word	0x42b40000
 8001664:	437a0000 	.word	0x437a0000
 8001668:	43340000 	.word	0x43340000

0800166c <imprimir_LCD>:

void imprimir_LCD(){
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
	char str[16]="                ";
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <imprimir_LCD+0x98>)
 8001674:	463c      	mov	r4, r7
 8001676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if((HAL_GetTick()-tiempo1)>100){
 800167c:	f000 fbd0 	bl	8001e20 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <imprimir_LCD+0x9c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d937      	bls.n	80016fc <imprimir_LCD+0x90>
			tiempo1=HAL_GetTick();
 800168c:	f000 fbc8 	bl	8001e20 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <imprimir_LCD+0x9c>)
 8001694:	601a      	str	r2, [r3, #0]
			numero_pantalla=str;
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <imprimir_LCD+0xa0>)
 8001698:	463b      	mov	r3, r7
 800169a:	6013      	str	r3, [r2, #0]
		//	numero_pantalla[2]=' ';
			  datoleido=(RxBuffer*180/250)-90;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <imprimir_LCD+0xa4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	23b4      	movs	r3, #180	; 0xb4
 80016a4:	fb03 f302 	mul.w	r3, r3, r2
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <imprimir_LCD+0xa8>)
 80016aa:	fb82 1203 	smull	r1, r2, r2, r3
 80016ae:	1112      	asrs	r2, r2, #4
 80016b0:	17db      	asrs	r3, r3, #31
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	3b5a      	subs	r3, #90	; 0x5a
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <imprimir_LCD+0xac>)
 80016b8:	6013      	str	r3, [r2, #0]
			  sprintf(numero_pantalla,"%d grados  ",datoleido);
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <imprimir_LCD+0xa0>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <imprimir_LCD+0xac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4915      	ldr	r1, [pc, #84]	; (800171c <imprimir_LCD+0xb0>)
 80016c6:	f002 ff01 	bl	80044cc <siprintf>
				  linea1LCD = "Servo FPGA:     ";
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <imprimir_LCD+0xb4>)
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <imprimir_LCD+0xb8>)
 80016ce:	601a      	str	r2, [r3, #0]
				  linea2LCD = numero_pantalla;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <imprimir_LCD+0xa0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <imprimir_LCD+0xbc>)
 80016d6:	6013      	str	r3, [r2, #0]

			  lcd_put_cur(0, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fc64 	bl	8000fa8 <lcd_put_cur>
			  lcd_send_string(linea1LCD);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <imprimir_LCD+0xb4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fcba 	bl	800105e <lcd_send_string>

			  lcd_put_cur(1, 0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fc5b 	bl	8000fa8 <lcd_put_cur>
			  lcd_send_string(linea2LCD);
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <imprimir_LCD+0xbc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fcb1 	bl	800105e <lcd_send_string>

	}
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	080061b0 	.word	0x080061b0
 8001708:	200001b4 	.word	0x200001b4
 800170c:	200001e0 	.word	0x200001e0
 8001710:	200001cc 	.word	0x200001cc
 8001714:	10624dd3 	.word	0x10624dd3
 8001718:	200001b0 	.word	0x200001b0
 800171c:	08006190 	.word	0x08006190
 8001720:	200001d0 	.word	0x200001d0
 8001724:	0800619c 	.word	0x0800619c
 8001728:	200001bc 	.word	0x200001bc

0800172c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001732:	f000 fb0f 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001736:	f000 f835 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173a:	f000 f927 	bl	800198c <MX_GPIO_Init>
  MX_I2C1_Init();
 800173e:	f000 f89b 	bl	8001878 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001742:	f000 f8c7 	bl	80018d4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001746:	f000 f8f3 	bl	8001930 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
tiempo1=HAL_GetTick();
 800174a:	f000 fb69 	bl	8001e20 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <main+0x68>)
 8001752:	601a      	str	r2, [r3, #0]
MPU6050_Init();
 8001754:	f7ff fc98 	bl	8001088 <MPU6050_Init>


  lcd_init();
 8001758:	f7ff fc44 	bl	8000fe4 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 800175c:	f7ff fcec 	bl	8001138 <MPU6050_Read_Accel>
	  	MPU6050_Read_Gyro();
 8001760:	f7ff fe26 	bl	80013b0 <MPU6050_Read_Gyro>
	  HAL_I2C_Master_Transmit(&hi2c2, WRITE_ADDR, &dato2send[1], 1, 1000);
 8001764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <main+0x6c>)
 800176e:	2106      	movs	r1, #6
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <main+0x70>)
 8001772:	f000 ff3b 	bl	80025ec <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2, READ_ADDR, &RxBuffer, 1, 1000);
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <main+0x74>)
 8001780:	2107      	movs	r1, #7
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <main+0x70>)
 8001784:	f001 f830 	bl	80027e8 <HAL_I2C_Master_Receive>
	  imprimir_LCD();
 8001788:	f7ff ff70 	bl	800166c <imprimir_LCD>
	  	HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 fb53 	bl	8001e38 <HAL_Delay>
	  MPU6050_Read_Accel();
 8001792:	e7e3      	b.n	800175c <main+0x30>
 8001794:	200001b4 	.word	0x200001b4
 8001798:	200001c5 	.word	0x200001c5
 800179c:	2000015c 	.word	0x2000015c
 80017a0:	200001cc 	.word	0x200001cc

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b094      	sub	sp, #80	; 0x50
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	2230      	movs	r2, #48	; 0x30
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fe82 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <SystemClock_Config+0xcc>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a27      	ldr	r2, [pc, #156]	; (8001870 <SystemClock_Config+0xcc>)
 80017d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <SystemClock_Config+0xd0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <SystemClock_Config+0xd0>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001800:	2301      	movs	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180a:	2302      	movs	r3, #2
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001818:	2348      	movs	r3, #72	; 0x48
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001820:	2307      	movs	r3, #7
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f002 f9cf 	bl	8003bcc <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001834:	f000 f8ee 	bl	8001a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2102      	movs	r1, #2
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fc28 	bl	80040ac <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001862:	f000 f8d7 	bl	8001a14 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	; 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40007000 	.word	0x40007000

08001878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_I2C1_Init+0x50>)
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <MX_I2C1_Init+0x54>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_I2C1_Init+0x50>)
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_I2C1_Init+0x58>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_I2C1_Init+0x50>)
 8001896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_I2C1_Init+0x50>)
 80018b6:	f000 fd61 	bl	800237c <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 f8a8 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000108 	.word	0x20000108
 80018cc:	40005400 	.word	0x40005400
 80018d0:	000186a0 	.word	0x000186a0

080018d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C2_Init+0x50>)
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <MX_I2C2_Init+0x54>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_I2C2_Init+0x50>)
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_I2C2_Init+0x58>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C2_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_I2C2_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_I2C2_Init+0x50>)
 80018f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_I2C2_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_I2C2_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_I2C2_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_I2C2_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_I2C2_Init+0x50>)
 8001912:	f000 fd33 	bl	800237c <HAL_I2C_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800191c:	f000 f87a 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000015c 	.word	0x2000015c
 8001928:	40005800 	.word	0x40005800
 800192c:	000186a0 	.word	0x000186a0

08001930 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_I2C3_Init+0x50>)
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <MX_I2C3_Init+0x54>)
 8001938:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_I2C3_Init+0x50>)
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_I2C3_Init+0x58>)
 800193e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_I2C3_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_I2C3_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_I2C3_Init+0x50>)
 800194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001952:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <MX_I2C3_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_I2C3_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <MX_I2C3_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_I2C3_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <MX_I2C3_Init+0x50>)
 800196e:	f000 fd05 	bl	800237c <HAL_I2C_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001978:	f000 f84c 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200000b4 	.word	0x200000b4
 8001984:	40005c00 	.word	0x40005c00
 8001988:	000186a0 	.word	0x000186a0

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_GPIO_Init+0x84>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <MX_GPIO_Init+0x84>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_GPIO_Init+0x84>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <Error_Handler+0x6>

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f000 fac0 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_I2C_MspInit+0x18c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d12c      	bne.n	8001ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a59      	ldr	r2, [pc, #356]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	2312      	movs	r3, #18
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aba:	2304      	movs	r3, #4
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	484e      	ldr	r0, [pc, #312]	; (8001c00 <HAL_I2C_MspInit+0x194>)
 8001ac6:	f000 fabf 	bl	8002048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ae6:	e083      	b.n	8001bf0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a45      	ldr	r2, [pc, #276]	; (8001c04 <HAL_I2C_MspInit+0x198>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12d      	bne.n	8001b4e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a40      	ldr	r2, [pc, #256]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b14:	2312      	movs	r3, #18
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b20:	2304      	movs	r3, #4
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <HAL_I2C_MspInit+0x194>)
 8001b2c:	f000 fa8c 	bl	8002048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
}
 8001b4c:	e050      	b.n	8001bf0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_I2C_MspInit+0x19c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d14b      	bne.n	8001bf0 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6313      	str	r3, [r2, #48]	; 0x30
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b96:	2312      	movs	r3, #18
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4817      	ldr	r0, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x1a0>)
 8001bae:	f000 fa4b 	bl	8002048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4810      	ldr	r0, [pc, #64]	; (8001c10 <HAL_I2C_MspInit+0x1a4>)
 8001bd0:	f000 fa3a 	bl	8002048 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001bde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_I2C_MspInit+0x190>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	3738      	adds	r7, #56	; 0x38
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40005800 	.word	0x40005800
 8001c08:	40005c00 	.word	0x40005c00
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020000 	.word	0x40020000

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f8ca 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_sbrk>:
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
 8001c98:	f002 fbe6 	bl	8004468 <__errno>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	2000009c 	.word	0x2000009c
 8001cd0:	200001f0 	.word	0x200001f0

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <SystemInit+0x28>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <SystemInit+0x28>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SystemInit+0x28>)
 8001cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cee:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x14>
 8001d04:	2100      	movs	r1, #0
 8001d06:	e003      	b.n	8001d10 <LoopCopyDataInit>

08001d08 <CopyDataInit>:
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x18>)
 8001d0a:	585b      	ldr	r3, [r3, r1]
 8001d0c:	5043      	str	r3, [r0, r1]
 8001d0e:	3104      	adds	r1, #4

08001d10 <LoopCopyDataInit>:
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <LoopFillZerobss+0x1c>)
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopFillZerobss+0x20>)
 8001d14:	1842      	adds	r2, r0, r1
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3f6      	bcc.n	8001d08 <CopyDataInit>
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x24>)
 8001d1c:	e002      	b.n	8001d24 <LoopFillZerobss>

08001d1e <FillZerobss>:
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f842 3b04 	str.w	r3, [r2], #4

08001d24 <LoopFillZerobss>:
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <LoopFillZerobss+0x28>)
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3f9      	bcc.n	8001d1e <FillZerobss>
 8001d2a:	f7ff ffd3 	bl	8001cd4 <SystemInit>
 8001d2e:	f002 fba1 	bl	8004474 <__libc_init_array>
 8001d32:	f7ff fcfb 	bl	800172c <main>
 8001d36:	4770      	bx	lr
 8001d38:	20020000 	.word	0x20020000
 8001d3c:	080062b0 	.word	0x080062b0
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000074 	.word	0x20000074
 8001d48:	20000074 	.word	0x20000074
 8001d4c:	200001f0 	.word	0x200001f0

08001d50 <ADC_IRQHandler>:
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f92f 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fe48 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f939 	bl	800202e <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f90f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200001e8 	.word	0x200001e8

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200001e8 	.word	0x200001e8

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_Delay+0x40>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff47 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff5c 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffb0 	bl	8001f9c <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e16b      	b.n	800233c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 815a 	bne.w	8002336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d00b      	beq.n	80020a2 <HAL_GPIO_Init+0x5a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002096:	2b11      	cmp	r3, #17
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b12      	cmp	r3, #18
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0xfc>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d123      	bne.n	800218c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80b4 	beq.w	8002336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <HAL_GPIO_Init+0x308>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a5e      	ldr	r2, [pc, #376]	; (8002350 <HAL_GPIO_Init+0x308>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_GPIO_Init+0x308>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ea:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_GPIO_Init+0x30c>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x226>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x222>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x21e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x21a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x216>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x324>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x212>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x328>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x20e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x20a>
 800224e:	2307      	movs	r3, #7
 8002250:	e00e      	b.n	8002270 <HAL_GPIO_Init+0x228>
 8002252:	2308      	movs	r3, #8
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x228>
 8002256:	2306      	movs	r3, #6
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x228>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x228>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x228>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x228>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x228>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x228>
 800226e:	2300      	movs	r3, #0
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002280:	4934      	ldr	r1, [pc, #208]	; (8002354 <HAL_GPIO_Init+0x30c>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b2:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_GPIO_Init+0x330>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_GPIO_Init+0x330>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_GPIO_Init+0x330>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_GPIO_Init+0x330>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_GPIO_Init+0x330>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002330:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3301      	adds	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	f67f ae90 	bls.w	8002064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002344:	bf00      	nop
 8002346:	3724      	adds	r7, #36	; 0x24
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e11f      	b.n	80025ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fb62 	bl	8001a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e0:	f002 f82e 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a7b      	ldr	r2, [pc, #492]	; (80025d8 <HAL_I2C_Init+0x25c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d807      	bhi.n	8002400 <HAL_I2C_Init+0x84>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_I2C_Init+0x260>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e006      	b.n	800240e <HAL_I2C_Init+0x92>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a77      	ldr	r2, [pc, #476]	; (80025e0 <HAL_I2C_Init+0x264>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0db      	b.n	80025ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <HAL_I2C_Init+0x268>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a64      	ldr	r2, [pc, #400]	; (80025d8 <HAL_I2C_Init+0x25c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d802      	bhi.n	8002450 <HAL_I2C_Init+0xd4>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	e009      	b.n	8002464 <HAL_I2C_Init+0xe8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	4a63      	ldr	r2, [pc, #396]	; (80025e8 <HAL_I2C_Init+0x26c>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4956      	ldr	r1, [pc, #344]	; (80025d8 <HAL_I2C_Init+0x25c>)
 8002480:	428b      	cmp	r3, r1
 8002482:	d80d      	bhi.n	80024a0 <HAL_I2C_Init+0x124>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e59      	subs	r1, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	bf38      	it	cc
 800249c:	2304      	movcc	r3, #4
 800249e:	e04f      	b.n	8002540 <HAL_I2C_Init+0x1c4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d111      	bne.n	80024cc <HAL_I2C_Init+0x150>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e012      	b.n	80024f2 <HAL_I2C_Init+0x176>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	0099      	lsls	r1, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Init+0x17e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e022      	b.n	8002540 <HAL_I2C_Init+0x1c4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10e      	bne.n	8002520 <HAL_I2C_Init+0x1a4>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e58      	subs	r0, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	440b      	add	r3, r1
 8002510:	fbb0 f3f3 	udiv	r3, r0, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251e:	e00f      	b.n	8002540 <HAL_I2C_Init+0x1c4>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	0099      	lsls	r1, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800256e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6911      	ldr	r1, [r2, #16]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	430b      	orrs	r3, r1
 8002582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	000186a0 	.word	0x000186a0
 80025dc:	001e847f 	.word	0x001e847f
 80025e0:	003d08ff 	.word	0x003d08ff
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	817b      	strh	r3, [r7, #10]
 80025fc:	4613      	mov	r3, r2
 80025fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff fc0e 	bl	8001e20 <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 80e0 	bne.w	80027d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2319      	movs	r3, #25
 800261a:	2201      	movs	r2, #1
 800261c:	4970      	ldr	r1, [pc, #448]	; (80027e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f001 f8f6 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	e0d3      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_Master_Transmit+0x50>
 8002638:	2302      	movs	r3, #2
 800263a:	e0cc      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d007      	beq.n	8002662 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2221      	movs	r2, #33	; 0x21
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2210      	movs	r2, #16
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fde2 	bl	8003274 <I2C_MasterRequestWrite>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e08d      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026d0:	e066      	b.n	80027a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	6a39      	ldr	r1, [r7, #32]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f001 f970 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06b      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d11b      	bne.n	8002774 <HAL_I2C_Master_Transmit+0x188>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6a39      	ldr	r1, [r7, #32]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f001 f960 	bl	8003a3e <I2C_WaitOnBTFFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e01a      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d194      	bne.n	80026d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	00100002 	.word	0x00100002
 80027e4:	ffff0000 	.word	0xffff0000

080027e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	817b      	strh	r3, [r7, #10]
 80027f8:	4613      	mov	r3, r2
 80027fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fb10 	bl	8001e20 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	f040 820b 	bne.w	8002c26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2319      	movs	r3, #25
 8002816:	2201      	movs	r2, #1
 8002818:	497c      	ldr	r1, [pc, #496]	; (8002a0c <HAL_I2C_Master_Receive+0x224>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fff8 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	e1fe      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_I2C_Master_Receive+0x50>
 8002834:	2302      	movs	r3, #2
 8002836:	e1f7      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d007      	beq.n	800285e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2222      	movs	r2, #34	; 0x22
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2210      	movs	r2, #16
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	893a      	ldrh	r2, [r7, #8]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a5c      	ldr	r2, [pc, #368]	; (8002a10 <HAL_I2C_Master_Receive+0x228>)
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a0:	8979      	ldrh	r1, [r7, #10]
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fd66 	bl	8003378 <I2C_MasterRequestRead>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1b8      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e18c      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d11b      	bne.n	8002926 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e16c      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	e14c      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800298c:	e138      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 80f1 	bhi.w	8002b7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b01      	cmp	r3, #1
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f001 f88b 	bl	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e139      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e6:	e10b      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d14e      	bne.n	8002a8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	2200      	movs	r2, #0
 80029f8:	4906      	ldr	r1, [pc, #24]	; (8002a14 <HAL_I2C_Master_Receive+0x22c>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 ff08 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e10e      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
 8002a0a:	bf00      	nop
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000
 8002a14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a8c:	e0b8      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	4966      	ldr	r1, [pc, #408]	; (8002c30 <HAL_I2C_Master_Receive+0x448>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 feb9 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0bf      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2200      	movs	r2, #0
 8002af2:	494f      	ldr	r1, [pc, #316]	; (8002c30 <HAL_I2C_Master_Receive+0x448>)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fe8b 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e091      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b78:	e042      	b.n	8002c00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 ff9e 	bl	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e04c      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d118      	bne.n	8002c00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f aec2 	bne.w	800298e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00010004 	.word	0x00010004

08002c34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	f7ff f8e7 	bl	8001e20 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	f040 80d9 	bne.w	8002e14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2319      	movs	r3, #25
 8002c68:	2201      	movs	r2, #1
 8002c6a:	496d      	ldr	r1, [pc, #436]	; (8002e20 <HAL_I2C_Mem_Write+0x1ec>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fdcf 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0cc      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Mem_Write+0x56>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e0c5      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d007      	beq.n	8002cb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2221      	movs	r2, #33	; 0x21
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <HAL_I2C_Mem_Write+0x1f0>)
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf2:	88f8      	ldrh	r0, [r7, #6]
 8002cf4:	893a      	ldrh	r2, [r7, #8]
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4603      	mov	r3, r0
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fc06 	bl	8003514 <I2C_RequestMemoryWrite>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d052      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e081      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fe50 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d107      	bne.n	8002d3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06b      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d11b      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x180>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d017      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1aa      	bne.n	8002d12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fe3c 	bl	8003a3e <I2C_WaitOnBTFFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d107      	bne.n	8002de4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e016      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00100002 	.word	0x00100002
 8002e24:	ffff0000 	.word	0xffff0000

08002e28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7fe ffed 	bl	8001e20 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	f040 8208 	bne.w	8003266 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2319      	movs	r3, #25
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	497b      	ldr	r1, [pc, #492]	; (800304c <HAL_I2C_Mem_Read+0x224>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fcd5 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e1fb      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Mem_Read+0x56>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e1f4      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d007      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2222      	movs	r2, #34	; 0x22
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_I2C_Mem_Read+0x228>)
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee6:	88f8      	ldrh	r0, [r7, #6]
 8002ee8:	893a      	ldrh	r2, [r7, #8]
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fba2 	bl	8003640 <I2C_RequestMemoryRead>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e1b0      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d113      	bne.n	8002f36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	623b      	str	r3, [r7, #32]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e184      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d11b      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e164      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d11b      	bne.n	8002fb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	e144      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fcc:	e138      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	f200 80f1 	bhi.w	80031ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d123      	bne.n	8003028 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fd6b 	bl	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e139      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003026:	e10b      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	d14e      	bne.n	80030ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	2200      	movs	r2, #0
 8003038:	4906      	ldr	r1, [pc, #24]	; (8003054 <HAL_I2C_Mem_Read+0x22c>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fbe8 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e10e      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
 800304a:	bf00      	nop
 800304c:	00100002 	.word	0x00100002
 8003050:	ffff0000 	.word	0xffff0000
 8003054:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030cc:	e0b8      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	2200      	movs	r2, #0
 80030d6:	4966      	ldr	r1, [pc, #408]	; (8003270 <HAL_I2C_Mem_Read+0x448>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fb99 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0bf      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	2200      	movs	r2, #0
 8003132:	494f      	ldr	r1, [pc, #316]	; (8003270 <HAL_I2C_Mem_Read+0x448>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fb6b 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e091      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031b8:	e042      	b.n	8003240 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fc7e 	bl	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e04c      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d118      	bne.n	8003240 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f aec2 	bne.w	8002fce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00010004 	.word	0x00010004

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fa9b 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d103      	bne.n	80032f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003304:	d108      	bne.n	8003318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e01b      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030f 	orn	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <I2C_MasterRequestWrite+0xfc>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fac1 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <I2C_MasterRequestWrite+0x100>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fab1 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010008 	.word	0x00010008
 8003374:	00010002 	.word	0x00010002

08003378 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d006      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d107      	bne.n	80033dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa11 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d103      	bne.n	800340c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e079      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e05f      	b.n	80034ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	11db      	asrs	r3, r3, #7
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 030f 	orn	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4930      	ldr	r1, [pc, #192]	; (800350c <I2C_MasterRequestRead+0x194>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa37 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e054      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4929      	ldr	r1, [pc, #164]	; (8003510 <I2C_MasterRequestRead+0x198>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa27 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e044      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f9af 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e017      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	11db      	asrs	r3, r3, #7
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 030e 	orn	r3, r3, #14
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <I2C_MasterRequestRead+0x198>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f9e3 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2200      	movs	r2, #0
 8003546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f960 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d103      	bne.n	800356e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e05f      	b.n	8003632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	492d      	ldr	r1, [pc, #180]	; (800363c <I2C_RequestMemoryWrite+0x128>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f998 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e04c      	b.n	8003632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa02 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d107      	bne.n	80035d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e02b      	b.n	8003632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	611a      	str	r2, [r3, #16]
 80035ea:	e021      	b.n	8003630 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f9dc 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e005      	b.n	8003632 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003626:	893b      	ldrh	r3, [r7, #8]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	00010002 	.word	0x00010002

08003640 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003668:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2200      	movs	r2, #0
 8003682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8c2 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d103      	bne.n	80036aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0aa      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	4952      	ldr	r1, [pc, #328]	; (800380c <I2C_RequestMemoryRead+0x1cc>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8fa 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e097      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f964 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e076      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
 8003726:	e021      	b.n	800376c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f93e 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b04      	cmp	r3, #4
 800374c:	d107      	bne.n	800375e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e050      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f923 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2b04      	cmp	r3, #4
 8003782:	d107      	bne.n	8003794 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003792:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e035      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f82b 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ce:	d103      	bne.n	80037d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e013      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037dc:	897b      	ldrh	r3, [r7, #10]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	4906      	ldr	r1, [pc, #24]	; (800380c <I2C_RequestMemoryRead+0x1cc>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f863 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	e025      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d021      	beq.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe faf9 	bl	8001e20 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e023      	b.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10d      	bne.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	e00c      	b.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d0b6      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038cc:	e051      	b.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d123      	bne.n	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e046      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d021      	beq.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fe fa77 	bl	8001e20 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e020      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10c      	bne.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e00b      	b.n	80039ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d18d      	bne.n	80038ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c8:	e02d      	b.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8ce 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02d      	b.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d021      	beq.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fa1d 	bl	8001e20 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d1ca      	bne.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4a:	e02d      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f88d 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e02d      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d021      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fe f9dc 	bl	8001e20 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d1ca      	bne.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003acc:	e042      	b.n	8003b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d119      	bne.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0210 	mvn.w	r2, #16
 8003ae4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e029      	b.n	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fe f986 	bl	8001e20 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e007      	b.n	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d1b5      	bne.n	8003ace <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d11b      	bne.n	8003bbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e25b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d075      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bea:	4ba3      	ldr	r3, [pc, #652]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf6:	4ba0      	ldr	r3, [pc, #640]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d112      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	4b99      	ldr	r3, [pc, #612]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05b      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d157      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e236      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d106      	bne.n	8003c40 <HAL_RCC_OscConfig+0x74>
 8003c32:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a90      	ldr	r2, [pc, #576]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e01d      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x98>
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a8a      	ldr	r2, [pc, #552]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c64:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a83      	ldr	r2, [pc, #524]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe f8cc 	bl	8001e20 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe f8c8 	bl	8001e20 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1fb      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe f8b8 	bl	8001e20 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f8b4 	bl	8001e20 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1e7      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d063      	beq.n	8003daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cee:	4b62      	ldr	r3, [pc, #392]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d11c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1bb      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4952      	ldr	r1, [pc, #328]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	e03a      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_RCC_OscConfig+0x2b0>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe f86d 	bl	8001e20 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f869 	bl	8001e20 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e19c      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4940      	ldr	r1, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_RCC_OscConfig+0x2b0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe f84c 	bl	8001e20 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fe f848 	bl	8001e20 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e17b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d030      	beq.n	8003e18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x2b4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f82c 	bl	8001e20 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dcc:	f7fe f828 	bl	8001e20 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e15b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x200>
 8003dea:	e015      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x2b4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe f815 	bl	8001e20 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f811 	bl	8001e20 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e144      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a0 	beq.w	8003f66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd ffd7 	bl	8001e20 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	e011      	b.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	42470000 	.word	0x42470000
 8003e80:	42470e80 	.word	0x42470e80
 8003e84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fd ffca 	bl	8001e20 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0fd      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
 8003eae:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	e01c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x32a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x312>
 8003ec4:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a76      	ldr	r2, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x32a>
 8003ede:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a70      	ldr	r2, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b6e      	ldr	r3, [pc, #440]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a6d      	ldr	r2, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fd ff8f 	bl	8001e20 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd ff8b 	bl	8001e20 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0bc      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x33a>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd ff79 	bl	8001e20 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd ff75 	bl	8001e20 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0a6      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b52      	ldr	r3, [pc, #328]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	4a51      	ldr	r2, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8092 	beq.w	8004094 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d05c      	beq.n	8004036 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d141      	bne.n	8004008 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b48      	ldr	r3, [pc, #288]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd ff49 	bl	8001e20 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd ff45 	bl	8001e20 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e078      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	4933      	ldr	r1, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd ff1e 	bl	8001e20 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd ff1a 	bl	8001e20 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04d      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x41c>
 8004006:	e045      	b.n	8004094 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fd ff07 	bl	8001e20 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd ff03 	bl	8001e20 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e036      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x44a>
 8004034:	e02e      	b.n	8004094 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e029      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	429a      	cmp	r2, r3
 8004054:	d11c      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d115      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d106      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40007000 	.word	0x40007000
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470060 	.word	0x42470060

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0cc      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e067      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4934      	ldr	r1, [pc, #208]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fd fe40 	bl	8001e20 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fd fe3c 	bl	8001e20 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d20c      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4601      	mov	r1, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	fa21 f303 	lsr.w	r3, r1, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fda0 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00
 8004268:	40023800 	.word	0x40023800
 800426c:	080061c4 	.word	0x080061c4
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428e:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d007      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x32>
 800429a:	2b08      	cmp	r3, #8
 800429c:	d008      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x38>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 80b4 	bne.w	800440c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042a6:	60bb      	str	r3, [r7, #8]
       break;
 80042a8:	e0b3      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b5e      	ldr	r3, [pc, #376]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042ac:	60bb      	str	r3, [r7, #8]
      break;
 80042ae:	e0b0      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b5a      	ldr	r3, [pc, #360]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b58      	ldr	r3, [pc, #352]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04a      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b55      	ldr	r3, [pc, #340]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	ea03 0501 	and.w	r5, r3, r1
 80042dc:	ea04 0602 	and.w	r6, r4, r2
 80042e0:	4629      	mov	r1, r5
 80042e2:	4632      	mov	r2, r6
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0154      	lsls	r4, r2, #5
 80042ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f2:	014b      	lsls	r3, r1, #5
 80042f4:	4619      	mov	r1, r3
 80042f6:	4622      	mov	r2, r4
 80042f8:	1b49      	subs	r1, r1, r5
 80042fa:	eb62 0206 	sbc.w	r2, r2, r6
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	0194      	lsls	r4, r2, #6
 8004308:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800430c:	018b      	lsls	r3, r1, #6
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	eb64 0402 	sbc.w	r4, r4, r2
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	00e2      	lsls	r2, r4, #3
 800431e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004322:	00d9      	lsls	r1, r3, #3
 8004324:	460b      	mov	r3, r1
 8004326:	4614      	mov	r4, r2
 8004328:	195b      	adds	r3, r3, r5
 800432a:	eb44 0406 	adc.w	r4, r4, r6
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	0262      	lsls	r2, r4, #9
 8004338:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800433c:	0259      	lsls	r1, r3, #9
 800433e:	460b      	mov	r3, r1
 8004340:	4614      	mov	r4, r2
 8004342:	4618      	mov	r0, r3
 8004344:	4621      	mov	r1, r4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	461a      	mov	r2, r3
 800434e:	4623      	mov	r3, r4
 8004350:	f7fc fc4a 	bl	8000be8 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e049      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	f240 11ff 	movw	r1, #511	; 0x1ff
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	ea03 0501 	and.w	r5, r3, r1
 8004372:	ea04 0602 	and.w	r6, r4, r2
 8004376:	4629      	mov	r1, r5
 8004378:	4632      	mov	r2, r6
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	0154      	lsls	r4, r2, #5
 8004384:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004388:	014b      	lsls	r3, r1, #5
 800438a:	4619      	mov	r1, r3
 800438c:	4622      	mov	r2, r4
 800438e:	1b49      	subs	r1, r1, r5
 8004390:	eb62 0206 	sbc.w	r2, r2, r6
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	0194      	lsls	r4, r2, #6
 800439e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043a2:	018b      	lsls	r3, r1, #6
 80043a4:	1a5b      	subs	r3, r3, r1
 80043a6:	eb64 0402 	sbc.w	r4, r4, r2
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043b8:	00d9      	lsls	r1, r3, #3
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	195b      	adds	r3, r3, r5
 80043c0:	eb44 0406 	adc.w	r4, r4, r6
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	02a2      	lsls	r2, r4, #10
 80043ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043d2:	0299      	lsls	r1, r3, #10
 80043d4:	460b      	mov	r3, r1
 80043d6:	4614      	mov	r4, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	4621      	mov	r1, r4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	f7fc fbff 	bl	8000be8 <__aeabi_uldivmod>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	60bb      	str	r3, [r7, #8]
      break;
 800440a:	e002      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800440e:	60bb      	str	r3, [r7, #8]
      break;
 8004410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004412:	68bb      	ldr	r3, [r7, #8]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	00f42400 	.word	0x00f42400
 8004424:	007a1200 	.word	0x007a1200

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000000 	.word	0x20000000

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff0 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004448:	4601      	mov	r1, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0a9b      	lsrs	r3, r3, #10
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	080061d4 	.word	0x080061d4

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	2000000c 	.word	0x2000000c

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4e0d      	ldr	r6, [pc, #52]	; (80044ac <__libc_init_array+0x38>)
 8004478:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447a:	1ba4      	subs	r4, r4, r6
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	2500      	movs	r5, #0
 8004480:	42a5      	cmp	r5, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	4e0b      	ldr	r6, [pc, #44]	; (80044b4 <__libc_init_array+0x40>)
 8004486:	4c0c      	ldr	r4, [pc, #48]	; (80044b8 <__libc_init_array+0x44>)
 8004488:	f001 fe74 	bl	8006174 <_init>
 800448c:	1ba4      	subs	r4, r4, r6
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	2500      	movs	r5, #0
 8004492:	42a5      	cmp	r5, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800449c:	4798      	blx	r3
 800449e:	3501      	adds	r5, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a6:	4798      	blx	r3
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	080062a8 	.word	0x080062a8
 80044b0:	080062a8 	.word	0x080062a8
 80044b4:	080062a8 	.word	0x080062a8
 80044b8:	080062ac 	.word	0x080062ac

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <siprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	b09c      	sub	sp, #112	; 0x70
 80044d2:	ab1d      	add	r3, sp, #116	; 0x74
 80044d4:	9002      	str	r0, [sp, #8]
 80044d6:	9006      	str	r0, [sp, #24]
 80044d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044dc:	4809      	ldr	r0, [pc, #36]	; (8004504 <siprintf+0x38>)
 80044de:	9107      	str	r1, [sp, #28]
 80044e0:	9104      	str	r1, [sp, #16]
 80044e2:	4909      	ldr	r1, [pc, #36]	; (8004508 <siprintf+0x3c>)
 80044e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e8:	9105      	str	r1, [sp, #20]
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	a902      	add	r1, sp, #8
 80044f0:	f000 f866 	bl	80045c0 <_svfiprintf_r>
 80044f4:	9b02      	ldr	r3, [sp, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	b01c      	add	sp, #112	; 0x70
 80044fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004500:	b003      	add	sp, #12
 8004502:	4770      	bx	lr
 8004504:	2000000c 	.word	0x2000000c
 8004508:	ffff0208 	.word	0xffff0208

0800450c <__ssputs_r>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	688e      	ldr	r6, [r1, #8]
 8004512:	429e      	cmp	r6, r3
 8004514:	4682      	mov	sl, r0
 8004516:	460c      	mov	r4, r1
 8004518:	4690      	mov	r8, r2
 800451a:	4699      	mov	r9, r3
 800451c:	d837      	bhi.n	800458e <__ssputs_r+0x82>
 800451e:	898a      	ldrh	r2, [r1, #12]
 8004520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004524:	d031      	beq.n	800458a <__ssputs_r+0x7e>
 8004526:	6825      	ldr	r5, [r4, #0]
 8004528:	6909      	ldr	r1, [r1, #16]
 800452a:	1a6f      	subs	r7, r5, r1
 800452c:	6965      	ldr	r5, [r4, #20]
 800452e:	2302      	movs	r3, #2
 8004530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004534:	fb95 f5f3 	sdiv	r5, r5, r3
 8004538:	f109 0301 	add.w	r3, r9, #1
 800453c:	443b      	add	r3, r7
 800453e:	429d      	cmp	r5, r3
 8004540:	bf38      	it	cc
 8004542:	461d      	movcc	r5, r3
 8004544:	0553      	lsls	r3, r2, #21
 8004546:	d530      	bpl.n	80045aa <__ssputs_r+0x9e>
 8004548:	4629      	mov	r1, r5
 800454a:	f000 fb2b 	bl	8004ba4 <_malloc_r>
 800454e:	4606      	mov	r6, r0
 8004550:	b950      	cbnz	r0, 8004568 <__ssputs_r+0x5c>
 8004552:	230c      	movs	r3, #12
 8004554:	f8ca 3000 	str.w	r3, [sl]
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	463a      	mov	r2, r7
 800456a:	6921      	ldr	r1, [r4, #16]
 800456c:	f000 faa8 	bl	8004ac0 <memcpy>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	6126      	str	r6, [r4, #16]
 800457e:	6165      	str	r5, [r4, #20]
 8004580:	443e      	add	r6, r7
 8004582:	1bed      	subs	r5, r5, r7
 8004584:	6026      	str	r6, [r4, #0]
 8004586:	60a5      	str	r5, [r4, #8]
 8004588:	464e      	mov	r6, r9
 800458a:	454e      	cmp	r6, r9
 800458c:	d900      	bls.n	8004590 <__ssputs_r+0x84>
 800458e:	464e      	mov	r6, r9
 8004590:	4632      	mov	r2, r6
 8004592:	4641      	mov	r1, r8
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	f000 fa9e 	bl	8004ad6 <memmove>
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	1b9b      	subs	r3, r3, r6
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	441e      	add	r6, r3
 80045a4:	6026      	str	r6, [r4, #0]
 80045a6:	2000      	movs	r0, #0
 80045a8:	e7dc      	b.n	8004564 <__ssputs_r+0x58>
 80045aa:	462a      	mov	r2, r5
 80045ac:	f000 fb54 	bl	8004c58 <_realloc_r>
 80045b0:	4606      	mov	r6, r0
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d1e2      	bne.n	800457c <__ssputs_r+0x70>
 80045b6:	6921      	ldr	r1, [r4, #16]
 80045b8:	4650      	mov	r0, sl
 80045ba:	f000 faa5 	bl	8004b08 <_free_r>
 80045be:	e7c8      	b.n	8004552 <__ssputs_r+0x46>

080045c0 <_svfiprintf_r>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	461d      	mov	r5, r3
 80045c6:	898b      	ldrh	r3, [r1, #12]
 80045c8:	061f      	lsls	r7, r3, #24
 80045ca:	b09d      	sub	sp, #116	; 0x74
 80045cc:	4680      	mov	r8, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	4616      	mov	r6, r2
 80045d2:	d50f      	bpl.n	80045f4 <_svfiprintf_r+0x34>
 80045d4:	690b      	ldr	r3, [r1, #16]
 80045d6:	b96b      	cbnz	r3, 80045f4 <_svfiprintf_r+0x34>
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	f000 fae3 	bl	8004ba4 <_malloc_r>
 80045de:	6020      	str	r0, [r4, #0]
 80045e0:	6120      	str	r0, [r4, #16]
 80045e2:	b928      	cbnz	r0, 80045f0 <_svfiprintf_r+0x30>
 80045e4:	230c      	movs	r3, #12
 80045e6:	f8c8 3000 	str.w	r3, [r8]
 80045ea:	f04f 30ff 	mov.w	r0, #4294967295
 80045ee:	e0c8      	b.n	8004782 <_svfiprintf_r+0x1c2>
 80045f0:	2340      	movs	r3, #64	; 0x40
 80045f2:	6163      	str	r3, [r4, #20]
 80045f4:	2300      	movs	r3, #0
 80045f6:	9309      	str	r3, [sp, #36]	; 0x24
 80045f8:	2320      	movs	r3, #32
 80045fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045fe:	2330      	movs	r3, #48	; 0x30
 8004600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004604:	9503      	str	r5, [sp, #12]
 8004606:	f04f 0b01 	mov.w	fp, #1
 800460a:	4637      	mov	r7, r6
 800460c:	463d      	mov	r5, r7
 800460e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004612:	b10b      	cbz	r3, 8004618 <_svfiprintf_r+0x58>
 8004614:	2b25      	cmp	r3, #37	; 0x25
 8004616:	d13e      	bne.n	8004696 <_svfiprintf_r+0xd6>
 8004618:	ebb7 0a06 	subs.w	sl, r7, r6
 800461c:	d00b      	beq.n	8004636 <_svfiprintf_r+0x76>
 800461e:	4653      	mov	r3, sl
 8004620:	4632      	mov	r2, r6
 8004622:	4621      	mov	r1, r4
 8004624:	4640      	mov	r0, r8
 8004626:	f7ff ff71 	bl	800450c <__ssputs_r>
 800462a:	3001      	adds	r0, #1
 800462c:	f000 80a4 	beq.w	8004778 <_svfiprintf_r+0x1b8>
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	4453      	add	r3, sl
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	783b      	ldrb	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 809d 	beq.w	8004778 <_svfiprintf_r+0x1b8>
 800463e:	2300      	movs	r3, #0
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004648:	9304      	str	r3, [sp, #16]
 800464a:	9307      	str	r3, [sp, #28]
 800464c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004650:	931a      	str	r3, [sp, #104]	; 0x68
 8004652:	462f      	mov	r7, r5
 8004654:	2205      	movs	r2, #5
 8004656:	f817 1b01 	ldrb.w	r1, [r7], #1
 800465a:	4850      	ldr	r0, [pc, #320]	; (800479c <_svfiprintf_r+0x1dc>)
 800465c:	f7fb fdb8 	bl	80001d0 <memchr>
 8004660:	9b04      	ldr	r3, [sp, #16]
 8004662:	b9d0      	cbnz	r0, 800469a <_svfiprintf_r+0xda>
 8004664:	06d9      	lsls	r1, r3, #27
 8004666:	bf44      	itt	mi
 8004668:	2220      	movmi	r2, #32
 800466a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800466e:	071a      	lsls	r2, r3, #28
 8004670:	bf44      	itt	mi
 8004672:	222b      	movmi	r2, #43	; 0x2b
 8004674:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004678:	782a      	ldrb	r2, [r5, #0]
 800467a:	2a2a      	cmp	r2, #42	; 0x2a
 800467c:	d015      	beq.n	80046aa <_svfiprintf_r+0xea>
 800467e:	9a07      	ldr	r2, [sp, #28]
 8004680:	462f      	mov	r7, r5
 8004682:	2000      	movs	r0, #0
 8004684:	250a      	movs	r5, #10
 8004686:	4639      	mov	r1, r7
 8004688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800468c:	3b30      	subs	r3, #48	; 0x30
 800468e:	2b09      	cmp	r3, #9
 8004690:	d94d      	bls.n	800472e <_svfiprintf_r+0x16e>
 8004692:	b1b8      	cbz	r0, 80046c4 <_svfiprintf_r+0x104>
 8004694:	e00f      	b.n	80046b6 <_svfiprintf_r+0xf6>
 8004696:	462f      	mov	r7, r5
 8004698:	e7b8      	b.n	800460c <_svfiprintf_r+0x4c>
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <_svfiprintf_r+0x1dc>)
 800469c:	1a80      	subs	r0, r0, r2
 800469e:	fa0b f000 	lsl.w	r0, fp, r0
 80046a2:	4318      	orrs	r0, r3
 80046a4:	9004      	str	r0, [sp, #16]
 80046a6:	463d      	mov	r5, r7
 80046a8:	e7d3      	b.n	8004652 <_svfiprintf_r+0x92>
 80046aa:	9a03      	ldr	r2, [sp, #12]
 80046ac:	1d11      	adds	r1, r2, #4
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	9103      	str	r1, [sp, #12]
 80046b2:	2a00      	cmp	r2, #0
 80046b4:	db01      	blt.n	80046ba <_svfiprintf_r+0xfa>
 80046b6:	9207      	str	r2, [sp, #28]
 80046b8:	e004      	b.n	80046c4 <_svfiprintf_r+0x104>
 80046ba:	4252      	negs	r2, r2
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	9207      	str	r2, [sp, #28]
 80046c2:	9304      	str	r3, [sp, #16]
 80046c4:	783b      	ldrb	r3, [r7, #0]
 80046c6:	2b2e      	cmp	r3, #46	; 0x2e
 80046c8:	d10c      	bne.n	80046e4 <_svfiprintf_r+0x124>
 80046ca:	787b      	ldrb	r3, [r7, #1]
 80046cc:	2b2a      	cmp	r3, #42	; 0x2a
 80046ce:	d133      	bne.n	8004738 <_svfiprintf_r+0x178>
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	9203      	str	r2, [sp, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bfb8      	it	lt
 80046dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80046e0:	3702      	adds	r7, #2
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	4d2e      	ldr	r5, [pc, #184]	; (80047a0 <_svfiprintf_r+0x1e0>)
 80046e6:	7839      	ldrb	r1, [r7, #0]
 80046e8:	2203      	movs	r2, #3
 80046ea:	4628      	mov	r0, r5
 80046ec:	f7fb fd70 	bl	80001d0 <memchr>
 80046f0:	b138      	cbz	r0, 8004702 <_svfiprintf_r+0x142>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	1b40      	subs	r0, r0, r5
 80046f6:	fa03 f000 	lsl.w	r0, r3, r0
 80046fa:	9b04      	ldr	r3, [sp, #16]
 80046fc:	4303      	orrs	r3, r0
 80046fe:	3701      	adds	r7, #1
 8004700:	9304      	str	r3, [sp, #16]
 8004702:	7839      	ldrb	r1, [r7, #0]
 8004704:	4827      	ldr	r0, [pc, #156]	; (80047a4 <_svfiprintf_r+0x1e4>)
 8004706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800470a:	2206      	movs	r2, #6
 800470c:	1c7e      	adds	r6, r7, #1
 800470e:	f7fb fd5f 	bl	80001d0 <memchr>
 8004712:	2800      	cmp	r0, #0
 8004714:	d038      	beq.n	8004788 <_svfiprintf_r+0x1c8>
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <_svfiprintf_r+0x1e8>)
 8004718:	bb13      	cbnz	r3, 8004760 <_svfiprintf_r+0x1a0>
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	3307      	adds	r3, #7
 800471e:	f023 0307 	bic.w	r3, r3, #7
 8004722:	3308      	adds	r3, #8
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004728:	444b      	add	r3, r9
 800472a:	9309      	str	r3, [sp, #36]	; 0x24
 800472c:	e76d      	b.n	800460a <_svfiprintf_r+0x4a>
 800472e:	fb05 3202 	mla	r2, r5, r2, r3
 8004732:	2001      	movs	r0, #1
 8004734:	460f      	mov	r7, r1
 8004736:	e7a6      	b.n	8004686 <_svfiprintf_r+0xc6>
 8004738:	2300      	movs	r3, #0
 800473a:	3701      	adds	r7, #1
 800473c:	9305      	str	r3, [sp, #20]
 800473e:	4619      	mov	r1, r3
 8004740:	250a      	movs	r5, #10
 8004742:	4638      	mov	r0, r7
 8004744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004748:	3a30      	subs	r2, #48	; 0x30
 800474a:	2a09      	cmp	r2, #9
 800474c:	d903      	bls.n	8004756 <_svfiprintf_r+0x196>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0c8      	beq.n	80046e4 <_svfiprintf_r+0x124>
 8004752:	9105      	str	r1, [sp, #20]
 8004754:	e7c6      	b.n	80046e4 <_svfiprintf_r+0x124>
 8004756:	fb05 2101 	mla	r1, r5, r1, r2
 800475a:	2301      	movs	r3, #1
 800475c:	4607      	mov	r7, r0
 800475e:	e7f0      	b.n	8004742 <_svfiprintf_r+0x182>
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4622      	mov	r2, r4
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <_svfiprintf_r+0x1ec>)
 8004768:	a904      	add	r1, sp, #16
 800476a:	4640      	mov	r0, r8
 800476c:	f3af 8000 	nop.w
 8004770:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004774:	4681      	mov	r9, r0
 8004776:	d1d6      	bne.n	8004726 <_svfiprintf_r+0x166>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	065b      	lsls	r3, r3, #25
 800477c:	f53f af35 	bmi.w	80045ea <_svfiprintf_r+0x2a>
 8004780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004782:	b01d      	add	sp, #116	; 0x74
 8004784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004788:	ab03      	add	r3, sp, #12
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4622      	mov	r2, r4
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_svfiprintf_r+0x1ec>)
 8004790:	a904      	add	r1, sp, #16
 8004792:	4640      	mov	r0, r8
 8004794:	f000 f882 	bl	800489c <_printf_i>
 8004798:	e7ea      	b.n	8004770 <_svfiprintf_r+0x1b0>
 800479a:	bf00      	nop
 800479c:	080061dc 	.word	0x080061dc
 80047a0:	080061e2 	.word	0x080061e2
 80047a4:	080061e6 	.word	0x080061e6
 80047a8:	00000000 	.word	0x00000000
 80047ac:	0800450d 	.word	0x0800450d

080047b0 <_printf_common>:
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	4691      	mov	r9, r2
 80047b6:	461f      	mov	r7, r3
 80047b8:	688a      	ldr	r2, [r1, #8]
 80047ba:	690b      	ldr	r3, [r1, #16]
 80047bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bfb8      	it	lt
 80047c4:	4613      	movlt	r3, r2
 80047c6:	f8c9 3000 	str.w	r3, [r9]
 80047ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ce:	4606      	mov	r6, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	b112      	cbz	r2, 80047da <_printf_common+0x2a>
 80047d4:	3301      	adds	r3, #1
 80047d6:	f8c9 3000 	str.w	r3, [r9]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0699      	lsls	r1, r3, #26
 80047de:	bf42      	ittt	mi
 80047e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047e4:	3302      	addmi	r3, #2
 80047e6:	f8c9 3000 	strmi.w	r3, [r9]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f015 0506 	ands.w	r5, r5, #6
 80047f0:	d107      	bne.n	8004802 <_printf_common+0x52>
 80047f2:	f104 0a19 	add.w	sl, r4, #25
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	f8d9 2000 	ldr.w	r2, [r9]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	42ab      	cmp	r3, r5
 8004800:	dc28      	bgt.n	8004854 <_printf_common+0xa4>
 8004802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	3300      	adds	r3, #0
 800480a:	bf18      	it	ne
 800480c:	2301      	movne	r3, #1
 800480e:	0692      	lsls	r2, r2, #26
 8004810:	d42d      	bmi.n	800486e <_printf_common+0xbe>
 8004812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004816:	4639      	mov	r1, r7
 8004818:	4630      	mov	r0, r6
 800481a:	47c0      	blx	r8
 800481c:	3001      	adds	r0, #1
 800481e:	d020      	beq.n	8004862 <_printf_common+0xb2>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	68e5      	ldr	r5, [r4, #12]
 8004824:	f8d9 2000 	ldr.w	r2, [r9]
 8004828:	f003 0306 	and.w	r3, r3, #6
 800482c:	2b04      	cmp	r3, #4
 800482e:	bf08      	it	eq
 8004830:	1aad      	subeq	r5, r5, r2
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	6922      	ldr	r2, [r4, #16]
 8004836:	bf0c      	ite	eq
 8004838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800483c:	2500      	movne	r5, #0
 800483e:	4293      	cmp	r3, r2
 8004840:	bfc4      	itt	gt
 8004842:	1a9b      	subgt	r3, r3, r2
 8004844:	18ed      	addgt	r5, r5, r3
 8004846:	f04f 0900 	mov.w	r9, #0
 800484a:	341a      	adds	r4, #26
 800484c:	454d      	cmp	r5, r9
 800484e:	d11a      	bne.n	8004886 <_printf_common+0xd6>
 8004850:	2000      	movs	r0, #0
 8004852:	e008      	b.n	8004866 <_printf_common+0xb6>
 8004854:	2301      	movs	r3, #1
 8004856:	4652      	mov	r2, sl
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d103      	bne.n	800486a <_printf_common+0xba>
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	3501      	adds	r5, #1
 800486c:	e7c3      	b.n	80047f6 <_printf_common+0x46>
 800486e:	18e1      	adds	r1, r4, r3
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	2030      	movs	r0, #48	; 0x30
 8004874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004878:	4422      	add	r2, r4
 800487a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800487e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004882:	3302      	adds	r3, #2
 8004884:	e7c5      	b.n	8004812 <_printf_common+0x62>
 8004886:	2301      	movs	r3, #1
 8004888:	4622      	mov	r2, r4
 800488a:	4639      	mov	r1, r7
 800488c:	4630      	mov	r0, r6
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d0e6      	beq.n	8004862 <_printf_common+0xb2>
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	e7d8      	b.n	800484c <_printf_common+0x9c>
	...

0800489c <_printf_i>:
 800489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048a4:	460c      	mov	r4, r1
 80048a6:	7e09      	ldrb	r1, [r1, #24]
 80048a8:	b085      	sub	sp, #20
 80048aa:	296e      	cmp	r1, #110	; 0x6e
 80048ac:	4617      	mov	r7, r2
 80048ae:	4606      	mov	r6, r0
 80048b0:	4698      	mov	r8, r3
 80048b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048b4:	f000 80b3 	beq.w	8004a1e <_printf_i+0x182>
 80048b8:	d822      	bhi.n	8004900 <_printf_i+0x64>
 80048ba:	2963      	cmp	r1, #99	; 0x63
 80048bc:	d036      	beq.n	800492c <_printf_i+0x90>
 80048be:	d80a      	bhi.n	80048d6 <_printf_i+0x3a>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	f000 80b9 	beq.w	8004a38 <_printf_i+0x19c>
 80048c6:	2958      	cmp	r1, #88	; 0x58
 80048c8:	f000 8083 	beq.w	80049d2 <_printf_i+0x136>
 80048cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048d4:	e032      	b.n	800493c <_printf_i+0xa0>
 80048d6:	2964      	cmp	r1, #100	; 0x64
 80048d8:	d001      	beq.n	80048de <_printf_i+0x42>
 80048da:	2969      	cmp	r1, #105	; 0x69
 80048dc:	d1f6      	bne.n	80048cc <_printf_i+0x30>
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	0605      	lsls	r5, r0, #24
 80048e4:	f103 0104 	add.w	r1, r3, #4
 80048e8:	d52a      	bpl.n	8004940 <_printf_i+0xa4>
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da03      	bge.n	80048fa <_printf_i+0x5e>
 80048f2:	222d      	movs	r2, #45	; 0x2d
 80048f4:	425b      	negs	r3, r3
 80048f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048fa:	486f      	ldr	r0, [pc, #444]	; (8004ab8 <_printf_i+0x21c>)
 80048fc:	220a      	movs	r2, #10
 80048fe:	e039      	b.n	8004974 <_printf_i+0xd8>
 8004900:	2973      	cmp	r1, #115	; 0x73
 8004902:	f000 809d 	beq.w	8004a40 <_printf_i+0x1a4>
 8004906:	d808      	bhi.n	800491a <_printf_i+0x7e>
 8004908:	296f      	cmp	r1, #111	; 0x6f
 800490a:	d020      	beq.n	800494e <_printf_i+0xb2>
 800490c:	2970      	cmp	r1, #112	; 0x70
 800490e:	d1dd      	bne.n	80048cc <_printf_i+0x30>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	e003      	b.n	8004922 <_printf_i+0x86>
 800491a:	2975      	cmp	r1, #117	; 0x75
 800491c:	d017      	beq.n	800494e <_printf_i+0xb2>
 800491e:	2978      	cmp	r1, #120	; 0x78
 8004920:	d1d4      	bne.n	80048cc <_printf_i+0x30>
 8004922:	2378      	movs	r3, #120	; 0x78
 8004924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004928:	4864      	ldr	r0, [pc, #400]	; (8004abc <_printf_i+0x220>)
 800492a:	e055      	b.n	80049d8 <_printf_i+0x13c>
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	1d19      	adds	r1, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6011      	str	r1, [r2, #0]
 8004934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800493c:	2301      	movs	r3, #1
 800493e:	e08c      	b.n	8004a5a <_printf_i+0x1be>
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6011      	str	r1, [r2, #0]
 8004944:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004948:	bf18      	it	ne
 800494a:	b21b      	sxthne	r3, r3
 800494c:	e7cf      	b.n	80048ee <_printf_i+0x52>
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6010      	str	r0, [r2, #0]
 8004956:	0628      	lsls	r0, r5, #24
 8004958:	d501      	bpl.n	800495e <_printf_i+0xc2>
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	e002      	b.n	8004964 <_printf_i+0xc8>
 800495e:	0668      	lsls	r0, r5, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0xbe>
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	4854      	ldr	r0, [pc, #336]	; (8004ab8 <_printf_i+0x21c>)
 8004966:	296f      	cmp	r1, #111	; 0x6f
 8004968:	bf14      	ite	ne
 800496a:	220a      	movne	r2, #10
 800496c:	2208      	moveq	r2, #8
 800496e:	2100      	movs	r1, #0
 8004970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004974:	6865      	ldr	r5, [r4, #4]
 8004976:	60a5      	str	r5, [r4, #8]
 8004978:	2d00      	cmp	r5, #0
 800497a:	f2c0 8095 	blt.w	8004aa8 <_printf_i+0x20c>
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	f021 0104 	bic.w	r1, r1, #4
 8004984:	6021      	str	r1, [r4, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d13d      	bne.n	8004a06 <_printf_i+0x16a>
 800498a:	2d00      	cmp	r5, #0
 800498c:	f040 808e 	bne.w	8004aac <_printf_i+0x210>
 8004990:	4665      	mov	r5, ip
 8004992:	2a08      	cmp	r2, #8
 8004994:	d10b      	bne.n	80049ae <_printf_i+0x112>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	07db      	lsls	r3, r3, #31
 800499a:	d508      	bpl.n	80049ae <_printf_i+0x112>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bfde      	ittt	le
 80049a4:	2330      	movle	r3, #48	; 0x30
 80049a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ae:	ebac 0305 	sub.w	r3, ip, r5
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	f8cd 8000 	str.w	r8, [sp]
 80049b8:	463b      	mov	r3, r7
 80049ba:	aa03      	add	r2, sp, #12
 80049bc:	4621      	mov	r1, r4
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff fef6 	bl	80047b0 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d14d      	bne.n	8004a64 <_printf_i+0x1c8>
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	b005      	add	sp, #20
 80049ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049d2:	4839      	ldr	r0, [pc, #228]	; (8004ab8 <_printf_i+0x21c>)
 80049d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	6821      	ldr	r1, [r4, #0]
 80049dc:	1d1d      	adds	r5, r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6015      	str	r5, [r2, #0]
 80049e2:	060a      	lsls	r2, r1, #24
 80049e4:	d50b      	bpl.n	80049fe <_printf_i+0x162>
 80049e6:	07ca      	lsls	r2, r1, #31
 80049e8:	bf44      	itt	mi
 80049ea:	f041 0120 	orrmi.w	r1, r1, #32
 80049ee:	6021      	strmi	r1, [r4, #0]
 80049f0:	b91b      	cbnz	r3, 80049fa <_printf_i+0x15e>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	f022 0220 	bic.w	r2, r2, #32
 80049f8:	6022      	str	r2, [r4, #0]
 80049fa:	2210      	movs	r2, #16
 80049fc:	e7b7      	b.n	800496e <_printf_i+0xd2>
 80049fe:	064d      	lsls	r5, r1, #25
 8004a00:	bf48      	it	mi
 8004a02:	b29b      	uxthmi	r3, r3
 8004a04:	e7ef      	b.n	80049e6 <_printf_i+0x14a>
 8004a06:	4665      	mov	r5, ip
 8004a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a10:	5cc3      	ldrb	r3, [r0, r3]
 8004a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a16:	460b      	mov	r3, r1
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d1f5      	bne.n	8004a08 <_printf_i+0x16c>
 8004a1c:	e7b9      	b.n	8004992 <_printf_i+0xf6>
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	6961      	ldr	r1, [r4, #20]
 8004a24:	1d18      	adds	r0, r3, #4
 8004a26:	6010      	str	r0, [r2, #0]
 8004a28:	0628      	lsls	r0, r5, #24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	d501      	bpl.n	8004a32 <_printf_i+0x196>
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	e002      	b.n	8004a38 <_printf_i+0x19c>
 8004a32:	066a      	lsls	r2, r5, #25
 8004a34:	d5fb      	bpl.n	8004a2e <_printf_i+0x192>
 8004a36:	8019      	strh	r1, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	4665      	mov	r5, ip
 8004a3e:	e7b9      	b.n	80049b4 <_printf_i+0x118>
 8004a40:	6813      	ldr	r3, [r2, #0]
 8004a42:	1d19      	adds	r1, r3, #4
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	681d      	ldr	r5, [r3, #0]
 8004a48:	6862      	ldr	r2, [r4, #4]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7fb fbbf 	bl	80001d0 <memchr>
 8004a52:	b108      	cbz	r0, 8004a58 <_printf_i+0x1bc>
 8004a54:	1b40      	subs	r0, r0, r5
 8004a56:	6060      	str	r0, [r4, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a62:	e7a7      	b.n	80049b4 <_printf_i+0x118>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	47c0      	blx	r8
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0aa      	beq.n	80049c8 <_printf_i+0x12c>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	079b      	lsls	r3, r3, #30
 8004a76:	d413      	bmi.n	8004aa0 <_printf_i+0x204>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e7a3      	b.n	80049cc <_printf_i+0x130>
 8004a84:	2301      	movs	r3, #1
 8004a86:	464a      	mov	r2, r9
 8004a88:	4639      	mov	r1, r7
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d09a      	beq.n	80049c8 <_printf_i+0x12c>
 8004a92:	3501      	adds	r5, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	9a03      	ldr	r2, [sp, #12]
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dcf2      	bgt.n	8004a84 <_printf_i+0x1e8>
 8004a9e:	e7eb      	b.n	8004a78 <_printf_i+0x1dc>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	f104 0919 	add.w	r9, r4, #25
 8004aa6:	e7f5      	b.n	8004a94 <_printf_i+0x1f8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ac      	bne.n	8004a06 <_printf_i+0x16a>
 8004aac:	7803      	ldrb	r3, [r0, #0]
 8004aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab6:	e76c      	b.n	8004992 <_printf_i+0xf6>
 8004ab8:	080061ed 	.word	0x080061ed
 8004abc:	080061fe 	.word	0x080061fe

08004ac0 <memcpy>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	1e43      	subs	r3, r0, #1
 8004ac4:	440a      	add	r2, r1
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	d100      	bne.n	8004acc <memcpy+0xc>
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad4:	e7f7      	b.n	8004ac6 <memcpy+0x6>

08004ad6 <memmove>:
 8004ad6:	4288      	cmp	r0, r1
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	eb01 0302 	add.w	r3, r1, r2
 8004ade:	d807      	bhi.n	8004af0 <memmove+0x1a>
 8004ae0:	1e42      	subs	r2, r0, #1
 8004ae2:	4299      	cmp	r1, r3
 8004ae4:	d00a      	beq.n	8004afc <memmove+0x26>
 8004ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004aee:	e7f8      	b.n	8004ae2 <memmove+0xc>
 8004af0:	4283      	cmp	r3, r0
 8004af2:	d9f5      	bls.n	8004ae0 <memmove+0xa>
 8004af4:	1881      	adds	r1, r0, r2
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	42d3      	cmn	r3, r2
 8004afa:	d100      	bne.n	8004afe <memmove+0x28>
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b06:	e7f7      	b.n	8004af8 <memmove+0x22>

08004b08 <_free_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d045      	beq.n	8004b9c <_free_r+0x94>
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f0c      	subs	r4, r1, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfb8      	it	lt
 8004b1a:	18e4      	addlt	r4, r4, r3
 8004b1c:	f000 f8d2 	bl	8004cc4 <__malloc_lock>
 8004b20:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <_free_r+0x98>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	4610      	mov	r0, r2
 8004b26:	b933      	cbnz	r3, 8004b36 <_free_r+0x2e>
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	6014      	str	r4, [r2, #0]
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b32:	f000 b8c8 	b.w	8004cc6 <__malloc_unlock>
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	d90c      	bls.n	8004b54 <_free_r+0x4c>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	1862      	adds	r2, r4, r1
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bf04      	itt	eq
 8004b42:	681a      	ldreq	r2, [r3, #0]
 8004b44:	685b      	ldreq	r3, [r3, #4]
 8004b46:	6063      	str	r3, [r4, #4]
 8004b48:	bf04      	itt	eq
 8004b4a:	1852      	addeq	r2, r2, r1
 8004b4c:	6022      	streq	r2, [r4, #0]
 8004b4e:	6004      	str	r4, [r0, #0]
 8004b50:	e7ec      	b.n	8004b2c <_free_r+0x24>
 8004b52:	4613      	mov	r3, r2
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	b10a      	cbz	r2, 8004b5c <_free_r+0x54>
 8004b58:	42a2      	cmp	r2, r4
 8004b5a:	d9fa      	bls.n	8004b52 <_free_r+0x4a>
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	1858      	adds	r0, r3, r1
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d10b      	bne.n	8004b7c <_free_r+0x74>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	4401      	add	r1, r0
 8004b68:	1858      	adds	r0, r3, r1
 8004b6a:	4282      	cmp	r2, r0
 8004b6c:	6019      	str	r1, [r3, #0]
 8004b6e:	d1dd      	bne.n	8004b2c <_free_r+0x24>
 8004b70:	6810      	ldr	r0, [r2, #0]
 8004b72:	6852      	ldr	r2, [r2, #4]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	4401      	add	r1, r0
 8004b78:	6019      	str	r1, [r3, #0]
 8004b7a:	e7d7      	b.n	8004b2c <_free_r+0x24>
 8004b7c:	d902      	bls.n	8004b84 <_free_r+0x7c>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	e7d3      	b.n	8004b2c <_free_r+0x24>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	428a      	cmp	r2, r1
 8004b8a:	bf04      	itt	eq
 8004b8c:	6811      	ldreq	r1, [r2, #0]
 8004b8e:	6852      	ldreq	r2, [r2, #4]
 8004b90:	6062      	str	r2, [r4, #4]
 8004b92:	bf04      	itt	eq
 8004b94:	1809      	addeq	r1, r1, r0
 8004b96:	6021      	streq	r1, [r4, #0]
 8004b98:	605c      	str	r4, [r3, #4]
 8004b9a:	e7c7      	b.n	8004b2c <_free_r+0x24>
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200000a0 	.word	0x200000a0

08004ba4 <_malloc_r>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	1ccd      	adds	r5, r1, #3
 8004ba8:	f025 0503 	bic.w	r5, r5, #3
 8004bac:	3508      	adds	r5, #8
 8004bae:	2d0c      	cmp	r5, #12
 8004bb0:	bf38      	it	cc
 8004bb2:	250c      	movcc	r5, #12
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	db01      	blt.n	8004bbe <_malloc_r+0x1a>
 8004bba:	42a9      	cmp	r1, r5
 8004bbc:	d903      	bls.n	8004bc6 <_malloc_r+0x22>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
 8004bc6:	f000 f87d 	bl	8004cc4 <__malloc_lock>
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <_malloc_r+0xac>)
 8004bcc:	6814      	ldr	r4, [r2, #0]
 8004bce:	4621      	mov	r1, r4
 8004bd0:	b991      	cbnz	r1, 8004bf8 <_malloc_r+0x54>
 8004bd2:	4c20      	ldr	r4, [pc, #128]	; (8004c54 <_malloc_r+0xb0>)
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	b91b      	cbnz	r3, 8004be0 <_malloc_r+0x3c>
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f863 	bl	8004ca4 <_sbrk_r>
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	4629      	mov	r1, r5
 8004be2:	4630      	mov	r0, r6
 8004be4:	f000 f85e 	bl	8004ca4 <_sbrk_r>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d124      	bne.n	8004c36 <_malloc_r+0x92>
 8004bec:	230c      	movs	r3, #12
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f868 	bl	8004cc6 <__malloc_unlock>
 8004bf6:	e7e4      	b.n	8004bc2 <_malloc_r+0x1e>
 8004bf8:	680b      	ldr	r3, [r1, #0]
 8004bfa:	1b5b      	subs	r3, r3, r5
 8004bfc:	d418      	bmi.n	8004c30 <_malloc_r+0x8c>
 8004bfe:	2b0b      	cmp	r3, #11
 8004c00:	d90f      	bls.n	8004c22 <_malloc_r+0x7e>
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	50cd      	str	r5, [r1, r3]
 8004c06:	18cc      	adds	r4, r1, r3
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f85c 	bl	8004cc6 <__malloc_unlock>
 8004c0e:	f104 000b 	add.w	r0, r4, #11
 8004c12:	1d23      	adds	r3, r4, #4
 8004c14:	f020 0007 	bic.w	r0, r0, #7
 8004c18:	1ac3      	subs	r3, r0, r3
 8004c1a:	d0d3      	beq.n	8004bc4 <_malloc_r+0x20>
 8004c1c:	425a      	negs	r2, r3
 8004c1e:	50e2      	str	r2, [r4, r3]
 8004c20:	e7d0      	b.n	8004bc4 <_malloc_r+0x20>
 8004c22:	428c      	cmp	r4, r1
 8004c24:	684b      	ldr	r3, [r1, #4]
 8004c26:	bf16      	itet	ne
 8004c28:	6063      	strne	r3, [r4, #4]
 8004c2a:	6013      	streq	r3, [r2, #0]
 8004c2c:	460c      	movne	r4, r1
 8004c2e:	e7eb      	b.n	8004c08 <_malloc_r+0x64>
 8004c30:	460c      	mov	r4, r1
 8004c32:	6849      	ldr	r1, [r1, #4]
 8004c34:	e7cc      	b.n	8004bd0 <_malloc_r+0x2c>
 8004c36:	1cc4      	adds	r4, r0, #3
 8004c38:	f024 0403 	bic.w	r4, r4, #3
 8004c3c:	42a0      	cmp	r0, r4
 8004c3e:	d005      	beq.n	8004c4c <_malloc_r+0xa8>
 8004c40:	1a21      	subs	r1, r4, r0
 8004c42:	4630      	mov	r0, r6
 8004c44:	f000 f82e 	bl	8004ca4 <_sbrk_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d0cf      	beq.n	8004bec <_malloc_r+0x48>
 8004c4c:	6025      	str	r5, [r4, #0]
 8004c4e:	e7db      	b.n	8004c08 <_malloc_r+0x64>
 8004c50:	200000a0 	.word	0x200000a0
 8004c54:	200000a4 	.word	0x200000a4

08004c58 <_realloc_r>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	460e      	mov	r6, r1
 8004c60:	b921      	cbnz	r1, 8004c6c <_realloc_r+0x14>
 8004c62:	4611      	mov	r1, r2
 8004c64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c68:	f7ff bf9c 	b.w	8004ba4 <_malloc_r>
 8004c6c:	b922      	cbnz	r2, 8004c78 <_realloc_r+0x20>
 8004c6e:	f7ff ff4b 	bl	8004b08 <_free_r>
 8004c72:	4625      	mov	r5, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c78:	f000 f826 	bl	8004cc8 <_malloc_usable_size_r>
 8004c7c:	42a0      	cmp	r0, r4
 8004c7e:	d20f      	bcs.n	8004ca0 <_realloc_r+0x48>
 8004c80:	4621      	mov	r1, r4
 8004c82:	4638      	mov	r0, r7
 8004c84:	f7ff ff8e 	bl	8004ba4 <_malloc_r>
 8004c88:	4605      	mov	r5, r0
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d0f2      	beq.n	8004c74 <_realloc_r+0x1c>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4622      	mov	r2, r4
 8004c92:	f7ff ff15 	bl	8004ac0 <memcpy>
 8004c96:	4631      	mov	r1, r6
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ff35 	bl	8004b08 <_free_r>
 8004c9e:	e7e9      	b.n	8004c74 <_realloc_r+0x1c>
 8004ca0:	4635      	mov	r5, r6
 8004ca2:	e7e7      	b.n	8004c74 <_realloc_r+0x1c>

08004ca4 <_sbrk_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4c06      	ldr	r4, [pc, #24]	; (8004cc0 <_sbrk_r+0x1c>)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4605      	mov	r5, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	f7fc ffda 	bl	8001c68 <_sbrk>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_sbrk_r+0x1a>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_sbrk_r+0x1a>
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	200001ec 	.word	0x200001ec

08004cc4 <__malloc_lock>:
 8004cc4:	4770      	bx	lr

08004cc6 <__malloc_unlock>:
 8004cc6:	4770      	bx	lr

08004cc8 <_malloc_usable_size_r>:
 8004cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ccc:	1f18      	subs	r0, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bfbc      	itt	lt
 8004cd2:	580b      	ldrlt	r3, [r1, r0]
 8004cd4:	18c0      	addlt	r0, r0, r3
 8004cd6:	4770      	bx	lr

08004cd8 <atan>:
 8004cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	ec55 4b10 	vmov	r4, r5, d0
 8004ce0:	4bc3      	ldr	r3, [pc, #780]	; (8004ff0 <atan+0x318>)
 8004ce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ce6:	429e      	cmp	r6, r3
 8004ce8:	46ab      	mov	fp, r5
 8004cea:	dd18      	ble.n	8004d1e <atan+0x46>
 8004cec:	4bc1      	ldr	r3, [pc, #772]	; (8004ff4 <atan+0x31c>)
 8004cee:	429e      	cmp	r6, r3
 8004cf0:	dc01      	bgt.n	8004cf6 <atan+0x1e>
 8004cf2:	d109      	bne.n	8004d08 <atan+0x30>
 8004cf4:	b144      	cbz	r4, 8004d08 <atan+0x30>
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7fb fabd 	bl	800027c <__adddf3>
 8004d02:	4604      	mov	r4, r0
 8004d04:	460d      	mov	r5, r1
 8004d06:	e006      	b.n	8004d16 <atan+0x3e>
 8004d08:	f1bb 0f00 	cmp.w	fp, #0
 8004d0c:	f340 8131 	ble.w	8004f72 <atan+0x29a>
 8004d10:	a59b      	add	r5, pc, #620	; (adr r5, 8004f80 <atan+0x2a8>)
 8004d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d16:	ec45 4b10 	vmov	d0, r4, r5
 8004d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	4bb6      	ldr	r3, [pc, #728]	; (8004ff8 <atan+0x320>)
 8004d20:	429e      	cmp	r6, r3
 8004d22:	dc14      	bgt.n	8004d4e <atan+0x76>
 8004d24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004d28:	429e      	cmp	r6, r3
 8004d2a:	dc0d      	bgt.n	8004d48 <atan+0x70>
 8004d2c:	a396      	add	r3, pc, #600	; (adr r3, 8004f88 <atan+0x2b0>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	ee10 0a10 	vmov	r0, s0
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7fb faa0 	bl	800027c <__adddf3>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4baf      	ldr	r3, [pc, #700]	; (8004ffc <atan+0x324>)
 8004d40:	f7fb fee2 	bl	8000b08 <__aeabi_dcmpgt>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1e6      	bne.n	8004d16 <atan+0x3e>
 8004d48:	f04f 3aff 	mov.w	sl, #4294967295
 8004d4c:	e02b      	b.n	8004da6 <atan+0xce>
 8004d4e:	f000 f963 	bl	8005018 <fabs>
 8004d52:	4bab      	ldr	r3, [pc, #684]	; (8005000 <atan+0x328>)
 8004d54:	429e      	cmp	r6, r3
 8004d56:	ec55 4b10 	vmov	r4, r5, d0
 8004d5a:	f300 80bf 	bgt.w	8004edc <atan+0x204>
 8004d5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004d62:	429e      	cmp	r6, r3
 8004d64:	f300 80a0 	bgt.w	8004ea8 <atan+0x1d0>
 8004d68:	ee10 2a10 	vmov	r2, s0
 8004d6c:	ee10 0a10 	vmov	r0, s0
 8004d70:	462b      	mov	r3, r5
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fa82 	bl	800027c <__adddf3>
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4ba0      	ldr	r3, [pc, #640]	; (8004ffc <atan+0x324>)
 8004d7c:	f7fb fa7c 	bl	8000278 <__aeabi_dsub>
 8004d80:	2200      	movs	r2, #0
 8004d82:	4606      	mov	r6, r0
 8004d84:	460f      	mov	r7, r1
 8004d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fa75 	bl	800027c <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4630      	mov	r0, r6
 8004d98:	4639      	mov	r1, r7
 8004d9a:	f7fb fd4f 	bl	800083c <__aeabi_ddiv>
 8004d9e:	f04f 0a00 	mov.w	sl, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	460d      	mov	r5, r1
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	4629      	mov	r1, r5
 8004dae:	f7fb fc1b 	bl	80005e8 <__aeabi_dmul>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4680      	mov	r8, r0
 8004db8:	4689      	mov	r9, r1
 8004dba:	f7fb fc15 	bl	80005e8 <__aeabi_dmul>
 8004dbe:	a374      	add	r3, pc, #464	; (adr r3, 8004f90 <atan+0x2b8>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	f7fb fc0e 	bl	80005e8 <__aeabi_dmul>
 8004dcc:	a372      	add	r3, pc, #456	; (adr r3, 8004f98 <atan+0x2c0>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fa53 	bl	800027c <__adddf3>
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	463b      	mov	r3, r7
 8004dda:	f7fb fc05 	bl	80005e8 <__aeabi_dmul>
 8004dde:	a370      	add	r3, pc, #448	; (adr r3, 8004fa0 <atan+0x2c8>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fa4a 	bl	800027c <__adddf3>
 8004de8:	4632      	mov	r2, r6
 8004dea:	463b      	mov	r3, r7
 8004dec:	f7fb fbfc 	bl	80005e8 <__aeabi_dmul>
 8004df0:	a36d      	add	r3, pc, #436	; (adr r3, 8004fa8 <atan+0x2d0>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f7fb fa41 	bl	800027c <__adddf3>
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	f7fb fbf3 	bl	80005e8 <__aeabi_dmul>
 8004e02:	a36b      	add	r3, pc, #428	; (adr r3, 8004fb0 <atan+0x2d8>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fa38 	bl	800027c <__adddf3>
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	f7fb fbea 	bl	80005e8 <__aeabi_dmul>
 8004e14:	a368      	add	r3, pc, #416	; (adr r3, 8004fb8 <atan+0x2e0>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fa2f 	bl	800027c <__adddf3>
 8004e1e:	4642      	mov	r2, r8
 8004e20:	464b      	mov	r3, r9
 8004e22:	f7fb fbe1 	bl	80005e8 <__aeabi_dmul>
 8004e26:	a366      	add	r3, pc, #408	; (adr r3, 8004fc0 <atan+0x2e8>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fbd8 	bl	80005e8 <__aeabi_dmul>
 8004e38:	a363      	add	r3, pc, #396	; (adr r3, 8004fc8 <atan+0x2f0>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fa1b 	bl	8000278 <__aeabi_dsub>
 8004e42:	4632      	mov	r2, r6
 8004e44:	463b      	mov	r3, r7
 8004e46:	f7fb fbcf 	bl	80005e8 <__aeabi_dmul>
 8004e4a:	a361      	add	r3, pc, #388	; (adr r3, 8004fd0 <atan+0x2f8>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb fa12 	bl	8000278 <__aeabi_dsub>
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	f7fb fbc6 	bl	80005e8 <__aeabi_dmul>
 8004e5c:	a35e      	add	r3, pc, #376	; (adr r3, 8004fd8 <atan+0x300>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f7fb fa09 	bl	8000278 <__aeabi_dsub>
 8004e66:	4632      	mov	r2, r6
 8004e68:	463b      	mov	r3, r7
 8004e6a:	f7fb fbbd 	bl	80005e8 <__aeabi_dmul>
 8004e6e:	a35c      	add	r3, pc, #368	; (adr r3, 8004fe0 <atan+0x308>)
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f7fb fa00 	bl	8000278 <__aeabi_dsub>
 8004e78:	4632      	mov	r2, r6
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	f7fb fbb4 	bl	80005e8 <__aeabi_dmul>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb f9f8 	bl	800027c <__adddf3>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	462b      	mov	r3, r5
 8004e90:	f7fb fbaa 	bl	80005e8 <__aeabi_dmul>
 8004e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	d14b      	bne.n	8004f36 <atan+0x25e>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb f9e9 	bl	8000278 <__aeabi_dsub>
 8004ea6:	e72c      	b.n	8004d02 <atan+0x2a>
 8004ea8:	ee10 0a10 	vmov	r0, s0
 8004eac:	2200      	movs	r2, #0
 8004eae:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <atan+0x324>)
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb f9e1 	bl	8000278 <__aeabi_dsub>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4606      	mov	r6, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <atan+0x324>)
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	f7fb f9db 	bl	800027c <__adddf3>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	f7fb fcb5 	bl	800083c <__aeabi_ddiv>
 8004ed2:	f04f 0a01 	mov.w	sl, #1
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	e764      	b.n	8004da6 <atan+0xce>
 8004edc:	4b49      	ldr	r3, [pc, #292]	; (8005004 <atan+0x32c>)
 8004ede:	429e      	cmp	r6, r3
 8004ee0:	dc1d      	bgt.n	8004f1e <atan+0x246>
 8004ee2:	ee10 0a10 	vmov	r0, s0
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4b47      	ldr	r3, [pc, #284]	; (8005008 <atan+0x330>)
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb f9c4 	bl	8000278 <__aeabi_dsub>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	4b44      	ldr	r3, [pc, #272]	; (8005008 <atan+0x330>)
 8004ef8:	4620      	mov	r0, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7fb fb74 	bl	80005e8 <__aeabi_dmul>
 8004f00:	2200      	movs	r2, #0
 8004f02:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <atan+0x324>)
 8004f04:	f7fb f9ba 	bl	800027c <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	4639      	mov	r1, r7
 8004f10:	f7fb fc94 	bl	800083c <__aeabi_ddiv>
 8004f14:	f04f 0a02 	mov.w	sl, #2
 8004f18:	4604      	mov	r4, r0
 8004f1a:	460d      	mov	r5, r1
 8004f1c:	e743      	b.n	8004da6 <atan+0xce>
 8004f1e:	462b      	mov	r3, r5
 8004f20:	ee10 2a10 	vmov	r2, s0
 8004f24:	2000      	movs	r0, #0
 8004f26:	4939      	ldr	r1, [pc, #228]	; (800500c <atan+0x334>)
 8004f28:	f7fb fc88 	bl	800083c <__aeabi_ddiv>
 8004f2c:	f04f 0a03 	mov.w	sl, #3
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	e737      	b.n	8004da6 <atan+0xce>
 8004f36:	4b36      	ldr	r3, [pc, #216]	; (8005010 <atan+0x338>)
 8004f38:	4e36      	ldr	r6, [pc, #216]	; (8005014 <atan+0x33c>)
 8004f3a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004f3e:	4456      	add	r6, sl
 8004f40:	449a      	add	sl, r3
 8004f42:	e9da 2300 	ldrd	r2, r3, [sl]
 8004f46:	f7fb f997 	bl	8000278 <__aeabi_dsub>
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	f7fb f993 	bl	8000278 <__aeabi_dsub>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004f5a:	f7fb f98d 	bl	8000278 <__aeabi_dsub>
 8004f5e:	f1bb 0f00 	cmp.w	fp, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	460d      	mov	r5, r1
 8004f66:	f6bf aed6 	bge.w	8004d16 <atan+0x3e>
 8004f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f6e:	461d      	mov	r5, r3
 8004f70:	e6d1      	b.n	8004d16 <atan+0x3e>
 8004f72:	a51d      	add	r5, pc, #116	; (adr r5, 8004fe8 <atan+0x310>)
 8004f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f78:	e6cd      	b.n	8004d16 <atan+0x3e>
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w
 8004f80:	54442d18 	.word	0x54442d18
 8004f84:	3ff921fb 	.word	0x3ff921fb
 8004f88:	8800759c 	.word	0x8800759c
 8004f8c:	7e37e43c 	.word	0x7e37e43c
 8004f90:	e322da11 	.word	0xe322da11
 8004f94:	3f90ad3a 	.word	0x3f90ad3a
 8004f98:	24760deb 	.word	0x24760deb
 8004f9c:	3fa97b4b 	.word	0x3fa97b4b
 8004fa0:	a0d03d51 	.word	0xa0d03d51
 8004fa4:	3fb10d66 	.word	0x3fb10d66
 8004fa8:	c54c206e 	.word	0xc54c206e
 8004fac:	3fb745cd 	.word	0x3fb745cd
 8004fb0:	920083ff 	.word	0x920083ff
 8004fb4:	3fc24924 	.word	0x3fc24924
 8004fb8:	5555550d 	.word	0x5555550d
 8004fbc:	3fd55555 	.word	0x3fd55555
 8004fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8004fc4:	bfa2b444 	.word	0xbfa2b444
 8004fc8:	52defd9a 	.word	0x52defd9a
 8004fcc:	3fadde2d 	.word	0x3fadde2d
 8004fd0:	af749a6d 	.word	0xaf749a6d
 8004fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8004fd8:	fe231671 	.word	0xfe231671
 8004fdc:	3fbc71c6 	.word	0x3fbc71c6
 8004fe0:	9998ebc4 	.word	0x9998ebc4
 8004fe4:	3fc99999 	.word	0x3fc99999
 8004fe8:	54442d18 	.word	0x54442d18
 8004fec:	bff921fb 	.word	0xbff921fb
 8004ff0:	440fffff 	.word	0x440fffff
 8004ff4:	7ff00000 	.word	0x7ff00000
 8004ff8:	3fdbffff 	.word	0x3fdbffff
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	3ff2ffff 	.word	0x3ff2ffff
 8005004:	40037fff 	.word	0x40037fff
 8005008:	3ff80000 	.word	0x3ff80000
 800500c:	bff00000 	.word	0xbff00000
 8005010:	08006230 	.word	0x08006230
 8005014:	08006210 	.word	0x08006210

08005018 <fabs>:
 8005018:	ec51 0b10 	vmov	r0, r1, d0
 800501c:	ee10 2a10 	vmov	r2, s0
 8005020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005024:	ec43 2b10 	vmov	d0, r2, r3
 8005028:	4770      	bx	lr
	...

0800502c <pow>:
 800502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	ed2d 8b04 	vpush	{d8-d9}
 8005034:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005308 <pow+0x2dc>
 8005038:	b08d      	sub	sp, #52	; 0x34
 800503a:	ec57 6b10 	vmov	r6, r7, d0
 800503e:	ec55 4b11 	vmov	r4, r5, d1
 8005042:	f000 f9bd 	bl	80053c0 <__ieee754_pow>
 8005046:	f999 3000 	ldrsb.w	r3, [r9]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	eeb0 8a40 	vmov.f32	s16, s0
 8005052:	eef0 8a60 	vmov.f32	s17, s1
 8005056:	46c8      	mov	r8, r9
 8005058:	d05f      	beq.n	800511a <pow+0xee>
 800505a:	4622      	mov	r2, r4
 800505c:	462b      	mov	r3, r5
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb fd5b 	bl	8000b1c <__aeabi_dcmpun>
 8005066:	4683      	mov	fp, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d156      	bne.n	800511a <pow+0xee>
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fd52 	bl	8000b1c <__aeabi_dcmpun>
 8005078:	9001      	str	r0, [sp, #4]
 800507a:	b1e8      	cbz	r0, 80050b8 <pow+0x8c>
 800507c:	2200      	movs	r2, #0
 800507e:	2300      	movs	r3, #0
 8005080:	4620      	mov	r0, r4
 8005082:	4629      	mov	r1, r5
 8005084:	f7fb fd18 	bl	8000ab8 <__aeabi_dcmpeq>
 8005088:	2800      	cmp	r0, #0
 800508a:	d046      	beq.n	800511a <pow+0xee>
 800508c:	2301      	movs	r3, #1
 800508e:	9302      	str	r3, [sp, #8]
 8005090:	4b96      	ldr	r3, [pc, #600]	; (80052ec <pow+0x2c0>)
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	4b96      	ldr	r3, [pc, #600]	; (80052f0 <pow+0x2c4>)
 8005096:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800509a:	2200      	movs	r2, #0
 800509c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80050a0:	9b00      	ldr	r3, [sp, #0]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80050a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80050ac:	d033      	beq.n	8005116 <pow+0xea>
 80050ae:	a802      	add	r0, sp, #8
 80050b0:	f000 ff4c 	bl	8005f4c <matherr>
 80050b4:	bb48      	cbnz	r0, 800510a <pow+0xde>
 80050b6:	e05d      	b.n	8005174 <pow+0x148>
 80050b8:	f04f 0a00 	mov.w	sl, #0
 80050bc:	f04f 0b00 	mov.w	fp, #0
 80050c0:	4652      	mov	r2, sl
 80050c2:	465b      	mov	r3, fp
 80050c4:	4630      	mov	r0, r6
 80050c6:	4639      	mov	r1, r7
 80050c8:	f7fb fcf6 	bl	8000ab8 <__aeabi_dcmpeq>
 80050cc:	ec4b ab19 	vmov	d9, sl, fp
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d054      	beq.n	800517e <pow+0x152>
 80050d4:	4652      	mov	r2, sl
 80050d6:	465b      	mov	r3, fp
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb fcec 	bl	8000ab8 <__aeabi_dcmpeq>
 80050e0:	4680      	mov	r8, r0
 80050e2:	b318      	cbz	r0, 800512c <pow+0x100>
 80050e4:	2301      	movs	r3, #1
 80050e6:	9302      	str	r3, [sp, #8]
 80050e8:	4b80      	ldr	r3, [pc, #512]	; (80052ec <pow+0x2c0>)
 80050ea:	9303      	str	r3, [sp, #12]
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	930a      	str	r3, [sp, #40]	; 0x28
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80050f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80050fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0d5      	beq.n	80050ae <pow+0x82>
 8005102:	4b7b      	ldr	r3, [pc, #492]	; (80052f0 <pow+0x2c4>)
 8005104:	2200      	movs	r2, #0
 8005106:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	b11b      	cbz	r3, 8005116 <pow+0xea>
 800510e:	f7ff f9ab 	bl	8004468 <__errno>
 8005112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	ed9d 8b08 	vldr	d8, [sp, #32]
 800511a:	eeb0 0a48 	vmov.f32	s0, s16
 800511e:	eef0 0a68 	vmov.f32	s1, s17
 8005122:	b00d      	add	sp, #52	; 0x34
 8005124:	ecbd 8b04 	vpop	{d8-d9}
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512c:	ec45 4b10 	vmov	d0, r4, r5
 8005130:	f000 ff04 	bl	8005f3c <finite>
 8005134:	2800      	cmp	r0, #0
 8005136:	d0f0      	beq.n	800511a <pow+0xee>
 8005138:	4652      	mov	r2, sl
 800513a:	465b      	mov	r3, fp
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb fcc4 	bl	8000acc <__aeabi_dcmplt>
 8005144:	2800      	cmp	r0, #0
 8005146:	d0e8      	beq.n	800511a <pow+0xee>
 8005148:	2301      	movs	r3, #1
 800514a:	9302      	str	r3, [sp, #8]
 800514c:	4b67      	ldr	r3, [pc, #412]	; (80052ec <pow+0x2c0>)
 800514e:	9303      	str	r3, [sp, #12]
 8005150:	f999 3000 	ldrsb.w	r3, [r9]
 8005154:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005158:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800515c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005160:	b913      	cbnz	r3, 8005168 <pow+0x13c>
 8005162:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005166:	e7a2      	b.n	80050ae <pow+0x82>
 8005168:	4962      	ldr	r1, [pc, #392]	; (80052f4 <pow+0x2c8>)
 800516a:	2000      	movs	r0, #0
 800516c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d19c      	bne.n	80050ae <pow+0x82>
 8005174:	f7ff f978 	bl	8004468 <__errno>
 8005178:	2321      	movs	r3, #33	; 0x21
 800517a:	6003      	str	r3, [r0, #0]
 800517c:	e7c5      	b.n	800510a <pow+0xde>
 800517e:	eeb0 0a48 	vmov.f32	s0, s16
 8005182:	eef0 0a68 	vmov.f32	s1, s17
 8005186:	f000 fed9 	bl	8005f3c <finite>
 800518a:	9000      	str	r0, [sp, #0]
 800518c:	2800      	cmp	r0, #0
 800518e:	f040 8081 	bne.w	8005294 <pow+0x268>
 8005192:	ec47 6b10 	vmov	d0, r6, r7
 8005196:	f000 fed1 	bl	8005f3c <finite>
 800519a:	2800      	cmp	r0, #0
 800519c:	d07a      	beq.n	8005294 <pow+0x268>
 800519e:	ec45 4b10 	vmov	d0, r4, r5
 80051a2:	f000 fecb 	bl	8005f3c <finite>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d074      	beq.n	8005294 <pow+0x268>
 80051aa:	ec53 2b18 	vmov	r2, r3, d8
 80051ae:	ee18 0a10 	vmov	r0, s16
 80051b2:	4619      	mov	r1, r3
 80051b4:	f7fb fcb2 	bl	8000b1c <__aeabi_dcmpun>
 80051b8:	f999 9000 	ldrsb.w	r9, [r9]
 80051bc:	4b4b      	ldr	r3, [pc, #300]	; (80052ec <pow+0x2c0>)
 80051be:	b1b0      	cbz	r0, 80051ee <pow+0x1c2>
 80051c0:	2201      	movs	r2, #1
 80051c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051c6:	9b00      	ldr	r3, [sp, #0]
 80051c8:	930a      	str	r3, [sp, #40]	; 0x28
 80051ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80051ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80051d2:	f1b9 0f00 	cmp.w	r9, #0
 80051d6:	d0c4      	beq.n	8005162 <pow+0x136>
 80051d8:	4652      	mov	r2, sl
 80051da:	465b      	mov	r3, fp
 80051dc:	4650      	mov	r0, sl
 80051de:	4659      	mov	r1, fp
 80051e0:	f7fb fb2c 	bl	800083c <__aeabi_ddiv>
 80051e4:	f1b9 0f02 	cmp.w	r9, #2
 80051e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051ec:	e7c1      	b.n	8005172 <pow+0x146>
 80051ee:	2203      	movs	r2, #3
 80051f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051f4:	900a      	str	r0, [sp, #40]	; 0x28
 80051f6:	4629      	mov	r1, r5
 80051f8:	4620      	mov	r0, r4
 80051fa:	2200      	movs	r2, #0
 80051fc:	4b3e      	ldr	r3, [pc, #248]	; (80052f8 <pow+0x2cc>)
 80051fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005202:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005206:	f7fb f9ef 	bl	80005e8 <__aeabi_dmul>
 800520a:	4604      	mov	r4, r0
 800520c:	460d      	mov	r5, r1
 800520e:	f1b9 0f00 	cmp.w	r9, #0
 8005212:	d124      	bne.n	800525e <pow+0x232>
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <pow+0x2d0>)
 8005216:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800521a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800521e:	4630      	mov	r0, r6
 8005220:	4652      	mov	r2, sl
 8005222:	465b      	mov	r3, fp
 8005224:	4639      	mov	r1, r7
 8005226:	f7fb fc51 	bl	8000acc <__aeabi_dcmplt>
 800522a:	2800      	cmp	r0, #0
 800522c:	d056      	beq.n	80052dc <pow+0x2b0>
 800522e:	ec45 4b10 	vmov	d0, r4, r5
 8005232:	f000 fe95 	bl	8005f60 <rint>
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	ec51 0b10 	vmov	r0, r1, d0
 800523e:	f7fb fc3b 	bl	8000ab8 <__aeabi_dcmpeq>
 8005242:	b920      	cbnz	r0, 800524e <pow+0x222>
 8005244:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <pow+0x2d4>)
 8005246:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800524a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800524e:	f998 3000 	ldrsb.w	r3, [r8]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d142      	bne.n	80052dc <pow+0x2b0>
 8005256:	f7ff f907 	bl	8004468 <__errno>
 800525a:	2322      	movs	r3, #34	; 0x22
 800525c:	e78d      	b.n	800517a <pow+0x14e>
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <pow+0x2d8>)
 8005260:	2200      	movs	r2, #0
 8005262:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005266:	4630      	mov	r0, r6
 8005268:	4652      	mov	r2, sl
 800526a:	465b      	mov	r3, fp
 800526c:	4639      	mov	r1, r7
 800526e:	f7fb fc2d 	bl	8000acc <__aeabi_dcmplt>
 8005272:	2800      	cmp	r0, #0
 8005274:	d0eb      	beq.n	800524e <pow+0x222>
 8005276:	ec45 4b10 	vmov	d0, r4, r5
 800527a:	f000 fe71 	bl	8005f60 <rint>
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	ec51 0b10 	vmov	r0, r1, d0
 8005286:	f7fb fc17 	bl	8000ab8 <__aeabi_dcmpeq>
 800528a:	2800      	cmp	r0, #0
 800528c:	d1df      	bne.n	800524e <pow+0x222>
 800528e:	2200      	movs	r2, #0
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <pow+0x2c8>)
 8005292:	e7da      	b.n	800524a <pow+0x21e>
 8005294:	2200      	movs	r2, #0
 8005296:	2300      	movs	r3, #0
 8005298:	ec51 0b18 	vmov	r0, r1, d8
 800529c:	f7fb fc0c 	bl	8000ab8 <__aeabi_dcmpeq>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f43f af3a 	beq.w	800511a <pow+0xee>
 80052a6:	ec47 6b10 	vmov	d0, r6, r7
 80052aa:	f000 fe47 	bl	8005f3c <finite>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f43f af33 	beq.w	800511a <pow+0xee>
 80052b4:	ec45 4b10 	vmov	d0, r4, r5
 80052b8:	f000 fe40 	bl	8005f3c <finite>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f43f af2c 	beq.w	800511a <pow+0xee>
 80052c2:	2304      	movs	r3, #4
 80052c4:	9302      	str	r3, [sp, #8]
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <pow+0x2c0>)
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	930a      	str	r3, [sp, #40]	; 0x28
 80052ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052d6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80052da:	e7b8      	b.n	800524e <pow+0x222>
 80052dc:	a802      	add	r0, sp, #8
 80052de:	f000 fe35 	bl	8005f4c <matherr>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f47f af11 	bne.w	800510a <pow+0xde>
 80052e8:	e7b5      	b.n	8005256 <pow+0x22a>
 80052ea:	bf00      	nop
 80052ec:	08006250 	.word	0x08006250
 80052f0:	3ff00000 	.word	0x3ff00000
 80052f4:	fff00000 	.word	0xfff00000
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	47efffff 	.word	0x47efffff
 8005300:	c7efffff 	.word	0xc7efffff
 8005304:	7ff00000 	.word	0x7ff00000
 8005308:	20000070 	.word	0x20000070

0800530c <sqrt>:
 800530c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005310:	ed2d 8b02 	vpush	{d8}
 8005314:	b08b      	sub	sp, #44	; 0x2c
 8005316:	ec55 4b10 	vmov	r4, r5, d0
 800531a:	f000 fd5f 	bl	8005ddc <__ieee754_sqrt>
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <sqrt+0xac>)
 8005320:	eeb0 8a40 	vmov.f32	s16, s0
 8005324:	eef0 8a60 	vmov.f32	s17, s1
 8005328:	f993 6000 	ldrsb.w	r6, [r3]
 800532c:	1c73      	adds	r3, r6, #1
 800532e:	d02a      	beq.n	8005386 <sqrt+0x7a>
 8005330:	4622      	mov	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fb fbf0 	bl	8000b1c <__aeabi_dcmpun>
 800533c:	4607      	mov	r7, r0
 800533e:	bb10      	cbnz	r0, 8005386 <sqrt+0x7a>
 8005340:	f04f 0800 	mov.w	r8, #0
 8005344:	f04f 0900 	mov.w	r9, #0
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fb fbbc 	bl	8000acc <__aeabi_dcmplt>
 8005354:	b1b8      	cbz	r0, 8005386 <sqrt+0x7a>
 8005356:	2301      	movs	r3, #1
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <sqrt+0xb0>)
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9708      	str	r7, [sp, #32]
 8005360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005364:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005368:	b9b6      	cbnz	r6, 8005398 <sqrt+0x8c>
 800536a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800536e:	4668      	mov	r0, sp
 8005370:	f000 fdec 	bl	8005f4c <matherr>
 8005374:	b1d0      	cbz	r0, 80053ac <sqrt+0xa0>
 8005376:	9b08      	ldr	r3, [sp, #32]
 8005378:	b11b      	cbz	r3, 8005382 <sqrt+0x76>
 800537a:	f7ff f875 	bl	8004468 <__errno>
 800537e:	9b08      	ldr	r3, [sp, #32]
 8005380:	6003      	str	r3, [r0, #0]
 8005382:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005386:	eeb0 0a48 	vmov.f32	s0, s16
 800538a:	eef0 0a68 	vmov.f32	s1, s17
 800538e:	b00b      	add	sp, #44	; 0x2c
 8005390:	ecbd 8b02 	vpop	{d8}
 8005394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	4640      	mov	r0, r8
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fa4c 	bl	800083c <__aeabi_ddiv>
 80053a4:	2e02      	cmp	r6, #2
 80053a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053aa:	d1e0      	bne.n	800536e <sqrt+0x62>
 80053ac:	f7ff f85c 	bl	8004468 <__errno>
 80053b0:	2321      	movs	r3, #33	; 0x21
 80053b2:	6003      	str	r3, [r0, #0]
 80053b4:	e7df      	b.n	8005376 <sqrt+0x6a>
 80053b6:	bf00      	nop
 80053b8:	20000070 	.word	0x20000070
 80053bc:	08006254 	.word	0x08006254

080053c0 <__ieee754_pow>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	b091      	sub	sp, #68	; 0x44
 80053c6:	ed8d 1b00 	vstr	d1, [sp]
 80053ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 80053ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80053d2:	ea58 0302 	orrs.w	r3, r8, r2
 80053d6:	ec57 6b10 	vmov	r6, r7, d0
 80053da:	f000 84be 	beq.w	8005d5a <__ieee754_pow+0x99a>
 80053de:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <__ieee754_pow+0x208>)
 80053e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80053e4:	429c      	cmp	r4, r3
 80053e6:	463d      	mov	r5, r7
 80053e8:	ee10 aa10 	vmov	sl, s0
 80053ec:	dc09      	bgt.n	8005402 <__ieee754_pow+0x42>
 80053ee:	d103      	bne.n	80053f8 <__ieee754_pow+0x38>
 80053f0:	b93e      	cbnz	r6, 8005402 <__ieee754_pow+0x42>
 80053f2:	45a0      	cmp	r8, r4
 80053f4:	dc0d      	bgt.n	8005412 <__ieee754_pow+0x52>
 80053f6:	e001      	b.n	80053fc <__ieee754_pow+0x3c>
 80053f8:	4598      	cmp	r8, r3
 80053fa:	dc02      	bgt.n	8005402 <__ieee754_pow+0x42>
 80053fc:	4598      	cmp	r8, r3
 80053fe:	d10e      	bne.n	800541e <__ieee754_pow+0x5e>
 8005400:	b16a      	cbz	r2, 800541e <__ieee754_pow+0x5e>
 8005402:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005406:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800540a:	ea54 030a 	orrs.w	r3, r4, sl
 800540e:	f000 84a4 	beq.w	8005d5a <__ieee754_pow+0x99a>
 8005412:	486e      	ldr	r0, [pc, #440]	; (80055cc <__ieee754_pow+0x20c>)
 8005414:	b011      	add	sp, #68	; 0x44
 8005416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	f000 bd99 	b.w	8005f50 <nan>
 800541e:	2d00      	cmp	r5, #0
 8005420:	da53      	bge.n	80054ca <__ieee754_pow+0x10a>
 8005422:	4b6b      	ldr	r3, [pc, #428]	; (80055d0 <__ieee754_pow+0x210>)
 8005424:	4598      	cmp	r8, r3
 8005426:	dc4d      	bgt.n	80054c4 <__ieee754_pow+0x104>
 8005428:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800542c:	4598      	cmp	r8, r3
 800542e:	dd4c      	ble.n	80054ca <__ieee754_pow+0x10a>
 8005430:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005434:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005438:	2b14      	cmp	r3, #20
 800543a:	dd26      	ble.n	800548a <__ieee754_pow+0xca>
 800543c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005440:	fa22 f103 	lsr.w	r1, r2, r3
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	4293      	cmp	r3, r2
 800544a:	d13e      	bne.n	80054ca <__ieee754_pow+0x10a>
 800544c:	f001 0101 	and.w	r1, r1, #1
 8005450:	f1c1 0b02 	rsb	fp, r1, #2
 8005454:	2a00      	cmp	r2, #0
 8005456:	d15b      	bne.n	8005510 <__ieee754_pow+0x150>
 8005458:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <__ieee754_pow+0x208>)
 800545a:	4598      	cmp	r8, r3
 800545c:	d124      	bne.n	80054a8 <__ieee754_pow+0xe8>
 800545e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005462:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005466:	ea53 030a 	orrs.w	r3, r3, sl
 800546a:	f000 8476 	beq.w	8005d5a <__ieee754_pow+0x99a>
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <__ieee754_pow+0x214>)
 8005470:	429c      	cmp	r4, r3
 8005472:	dd2d      	ble.n	80054d0 <__ieee754_pow+0x110>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	f280 8473 	bge.w	8005d62 <__ieee754_pow+0x9a2>
 800547c:	2000      	movs	r0, #0
 800547e:	2100      	movs	r1, #0
 8005480:	ec41 0b10 	vmov	d0, r0, r1
 8005484:	b011      	add	sp, #68	; 0x44
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	2a00      	cmp	r2, #0
 800548c:	d13e      	bne.n	800550c <__ieee754_pow+0x14c>
 800548e:	f1c3 0314 	rsb	r3, r3, #20
 8005492:	fa48 f103 	asr.w	r1, r8, r3
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	4543      	cmp	r3, r8
 800549c:	f040 8469 	bne.w	8005d72 <__ieee754_pow+0x9b2>
 80054a0:	f001 0101 	and.w	r1, r1, #1
 80054a4:	f1c1 0b02 	rsb	fp, r1, #2
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <__ieee754_pow+0x218>)
 80054aa:	4598      	cmp	r8, r3
 80054ac:	d118      	bne.n	80054e0 <__ieee754_pow+0x120>
 80054ae:	f1b9 0f00 	cmp.w	r9, #0
 80054b2:	f280 845a 	bge.w	8005d6a <__ieee754_pow+0x9aa>
 80054b6:	4948      	ldr	r1, [pc, #288]	; (80055d8 <__ieee754_pow+0x218>)
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fb f9bd 	bl	800083c <__aeabi_ddiv>
 80054c2:	e7dd      	b.n	8005480 <__ieee754_pow+0xc0>
 80054c4:	f04f 0b02 	mov.w	fp, #2
 80054c8:	e7c4      	b.n	8005454 <__ieee754_pow+0x94>
 80054ca:	f04f 0b00 	mov.w	fp, #0
 80054ce:	e7c1      	b.n	8005454 <__ieee754_pow+0x94>
 80054d0:	f1b9 0f00 	cmp.w	r9, #0
 80054d4:	dad2      	bge.n	800547c <__ieee754_pow+0xbc>
 80054d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80054da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80054de:	e7cf      	b.n	8005480 <__ieee754_pow+0xc0>
 80054e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80054e4:	d106      	bne.n	80054f4 <__ieee754_pow+0x134>
 80054e6:	4632      	mov	r2, r6
 80054e8:	463b      	mov	r3, r7
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7fb f87b 	bl	80005e8 <__aeabi_dmul>
 80054f2:	e7c5      	b.n	8005480 <__ieee754_pow+0xc0>
 80054f4:	4b39      	ldr	r3, [pc, #228]	; (80055dc <__ieee754_pow+0x21c>)
 80054f6:	4599      	cmp	r9, r3
 80054f8:	d10a      	bne.n	8005510 <__ieee754_pow+0x150>
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	db08      	blt.n	8005510 <__ieee754_pow+0x150>
 80054fe:	ec47 6b10 	vmov	d0, r6, r7
 8005502:	b011      	add	sp, #68	; 0x44
 8005504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005508:	f000 bc68 	b.w	8005ddc <__ieee754_sqrt>
 800550c:	f04f 0b00 	mov.w	fp, #0
 8005510:	ec47 6b10 	vmov	d0, r6, r7
 8005514:	f7ff fd80 	bl	8005018 <fabs>
 8005518:	ec51 0b10 	vmov	r0, r1, d0
 800551c:	f1ba 0f00 	cmp.w	sl, #0
 8005520:	d127      	bne.n	8005572 <__ieee754_pow+0x1b2>
 8005522:	b124      	cbz	r4, 800552e <__ieee754_pow+0x16e>
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <__ieee754_pow+0x218>)
 8005526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800552a:	429a      	cmp	r2, r3
 800552c:	d121      	bne.n	8005572 <__ieee754_pow+0x1b2>
 800552e:	f1b9 0f00 	cmp.w	r9, #0
 8005532:	da05      	bge.n	8005540 <__ieee754_pow+0x180>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	2000      	movs	r0, #0
 800553a:	4927      	ldr	r1, [pc, #156]	; (80055d8 <__ieee754_pow+0x218>)
 800553c:	f7fb f97e 	bl	800083c <__aeabi_ddiv>
 8005540:	2d00      	cmp	r5, #0
 8005542:	da9d      	bge.n	8005480 <__ieee754_pow+0xc0>
 8005544:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005548:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800554c:	ea54 030b 	orrs.w	r3, r4, fp
 8005550:	d108      	bne.n	8005564 <__ieee754_pow+0x1a4>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fa fe8d 	bl	8000278 <__aeabi_dsub>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	e7ac      	b.n	80054be <__ieee754_pow+0xfe>
 8005564:	f1bb 0f01 	cmp.w	fp, #1
 8005568:	d18a      	bne.n	8005480 <__ieee754_pow+0xc0>
 800556a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800556e:	4619      	mov	r1, r3
 8005570:	e786      	b.n	8005480 <__ieee754_pow+0xc0>
 8005572:	0fed      	lsrs	r5, r5, #31
 8005574:	1e6b      	subs	r3, r5, #1
 8005576:	930d      	str	r3, [sp, #52]	; 0x34
 8005578:	ea5b 0303 	orrs.w	r3, fp, r3
 800557c:	d102      	bne.n	8005584 <__ieee754_pow+0x1c4>
 800557e:	4632      	mov	r2, r6
 8005580:	463b      	mov	r3, r7
 8005582:	e7e8      	b.n	8005556 <__ieee754_pow+0x196>
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <__ieee754_pow+0x220>)
 8005586:	4598      	cmp	r8, r3
 8005588:	f340 80fe 	ble.w	8005788 <__ieee754_pow+0x3c8>
 800558c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005590:	4598      	cmp	r8, r3
 8005592:	dd0a      	ble.n	80055aa <__ieee754_pow+0x1ea>
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <__ieee754_pow+0x214>)
 8005596:	429c      	cmp	r4, r3
 8005598:	dc0d      	bgt.n	80055b6 <__ieee754_pow+0x1f6>
 800559a:	f1b9 0f00 	cmp.w	r9, #0
 800559e:	f6bf af6d 	bge.w	800547c <__ieee754_pow+0xbc>
 80055a2:	a307      	add	r3, pc, #28	; (adr r3, 80055c0 <__ieee754_pow+0x200>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	e79f      	b.n	80054ea <__ieee754_pow+0x12a>
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <__ieee754_pow+0x224>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	ddf4      	ble.n	800559a <__ieee754_pow+0x1da>
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <__ieee754_pow+0x218>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	dd18      	ble.n	80055e8 <__ieee754_pow+0x228>
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	dcf2      	bgt.n	80055a2 <__ieee754_pow+0x1e2>
 80055bc:	e75e      	b.n	800547c <__ieee754_pow+0xbc>
 80055be:	bf00      	nop
 80055c0:	8800759c 	.word	0x8800759c
 80055c4:	7e37e43c 	.word	0x7e37e43c
 80055c8:	7ff00000 	.word	0x7ff00000
 80055cc:	080061e1 	.word	0x080061e1
 80055d0:	433fffff 	.word	0x433fffff
 80055d4:	3fefffff 	.word	0x3fefffff
 80055d8:	3ff00000 	.word	0x3ff00000
 80055dc:	3fe00000 	.word	0x3fe00000
 80055e0:	41e00000 	.word	0x41e00000
 80055e4:	3feffffe 	.word	0x3feffffe
 80055e8:	2200      	movs	r2, #0
 80055ea:	4b63      	ldr	r3, [pc, #396]	; (8005778 <__ieee754_pow+0x3b8>)
 80055ec:	f7fa fe44 	bl	8000278 <__aeabi_dsub>
 80055f0:	a355      	add	r3, pc, #340	; (adr r3, 8005748 <__ieee754_pow+0x388>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
 80055fa:	f7fa fff5 	bl	80005e8 <__aeabi_dmul>
 80055fe:	a354      	add	r3, pc, #336	; (adr r3, 8005750 <__ieee754_pow+0x390>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fa ffec 	bl	80005e8 <__aeabi_dmul>
 8005610:	2200      	movs	r2, #0
 8005612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005616:	4b59      	ldr	r3, [pc, #356]	; (800577c <__ieee754_pow+0x3bc>)
 8005618:	4620      	mov	r0, r4
 800561a:	4629      	mov	r1, r5
 800561c:	f7fa ffe4 	bl	80005e8 <__aeabi_dmul>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	a14c      	add	r1, pc, #304	; (adr r1, 8005758 <__ieee754_pow+0x398>)
 8005626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800562a:	f7fa fe25 	bl	8000278 <__aeabi_dsub>
 800562e:	4622      	mov	r2, r4
 8005630:	462b      	mov	r3, r5
 8005632:	f7fa ffd9 	bl	80005e8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	2000      	movs	r0, #0
 800563c:	4950      	ldr	r1, [pc, #320]	; (8005780 <__ieee754_pow+0x3c0>)
 800563e:	f7fa fe1b 	bl	8000278 <__aeabi_dsub>
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	4680      	mov	r8, r0
 8005648:	4689      	mov	r9, r1
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fa ffcb 	bl	80005e8 <__aeabi_dmul>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fa ffc5 	bl	80005e8 <__aeabi_dmul>
 800565e:	a340      	add	r3, pc, #256	; (adr r3, 8005760 <__ieee754_pow+0x3a0>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa ffc0 	bl	80005e8 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005670:	f7fa fe02 	bl	8000278 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa fdfc 	bl	800027c <__adddf3>
 8005684:	2000      	movs	r0, #0
 8005686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800568a:	4632      	mov	r2, r6
 800568c:	463b      	mov	r3, r7
 800568e:	f7fa fdf3 	bl	8000278 <__aeabi_dsub>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fded 	bl	8000278 <__aeabi_dsub>
 800569e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80056a4:	4313      	orrs	r3, r2
 80056a6:	4606      	mov	r6, r0
 80056a8:	460f      	mov	r7, r1
 80056aa:	f040 81eb 	bne.w	8005a84 <__ieee754_pow+0x6c4>
 80056ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005768 <__ieee754_pow+0x3a8>
 80056b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80056b6:	2400      	movs	r4, #0
 80056b8:	4622      	mov	r2, r4
 80056ba:	462b      	mov	r3, r5
 80056bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056c4:	f7fa fdd8 	bl	8000278 <__aeabi_dsub>
 80056c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056cc:	f7fa ff8c 	bl	80005e8 <__aeabi_dmul>
 80056d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056d4:	4680      	mov	r8, r0
 80056d6:	4689      	mov	r9, r1
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa ff84 	bl	80005e8 <__aeabi_dmul>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4640      	mov	r0, r8
 80056e6:	4649      	mov	r1, r9
 80056e8:	f7fa fdc8 	bl	800027c <__adddf3>
 80056ec:	4622      	mov	r2, r4
 80056ee:	462b      	mov	r3, r5
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056f8:	f7fa ff76 	bl	80005e8 <__aeabi_dmul>
 80056fc:	460b      	mov	r3, r1
 80056fe:	4604      	mov	r4, r0
 8005700:	460d      	mov	r5, r1
 8005702:	4602      	mov	r2, r0
 8005704:	4649      	mov	r1, r9
 8005706:	4640      	mov	r0, r8
 8005708:	e9cd 4500 	strd	r4, r5, [sp]
 800570c:	f7fa fdb6 	bl	800027c <__adddf3>
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <__ieee754_pow+0x3c4>)
 8005712:	4299      	cmp	r1, r3
 8005714:	4606      	mov	r6, r0
 8005716:	460f      	mov	r7, r1
 8005718:	468b      	mov	fp, r1
 800571a:	f340 82f7 	ble.w	8005d0c <__ieee754_pow+0x94c>
 800571e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005722:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005726:	4303      	orrs	r3, r0
 8005728:	f000 81ea 	beq.w	8005b00 <__ieee754_pow+0x740>
 800572c:	a310      	add	r3, pc, #64	; (adr r3, 8005770 <__ieee754_pow+0x3b0>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005736:	f7fa ff57 	bl	80005e8 <__aeabi_dmul>
 800573a:	a30d      	add	r3, pc, #52	; (adr r3, 8005770 <__ieee754_pow+0x3b0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	e6d5      	b.n	80054ee <__ieee754_pow+0x12e>
 8005742:	bf00      	nop
 8005744:	f3af 8000 	nop.w
 8005748:	60000000 	.word	0x60000000
 800574c:	3ff71547 	.word	0x3ff71547
 8005750:	f85ddf44 	.word	0xf85ddf44
 8005754:	3e54ae0b 	.word	0x3e54ae0b
 8005758:	55555555 	.word	0x55555555
 800575c:	3fd55555 	.word	0x3fd55555
 8005760:	652b82fe 	.word	0x652b82fe
 8005764:	3ff71547 	.word	0x3ff71547
 8005768:	00000000 	.word	0x00000000
 800576c:	bff00000 	.word	0xbff00000
 8005770:	8800759c 	.word	0x8800759c
 8005774:	7e37e43c 	.word	0x7e37e43c
 8005778:	3ff00000 	.word	0x3ff00000
 800577c:	3fd00000 	.word	0x3fd00000
 8005780:	3fe00000 	.word	0x3fe00000
 8005784:	408fffff 	.word	0x408fffff
 8005788:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	da05      	bge.n	800579e <__ieee754_pow+0x3de>
 8005792:	4bd3      	ldr	r3, [pc, #844]	; (8005ae0 <__ieee754_pow+0x720>)
 8005794:	f7fa ff28 	bl	80005e8 <__aeabi_dmul>
 8005798:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800579c:	460c      	mov	r4, r1
 800579e:	1523      	asrs	r3, r4, #20
 80057a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80057a4:	4413      	add	r3, r2
 80057a6:	9309      	str	r3, [sp, #36]	; 0x24
 80057a8:	4bce      	ldr	r3, [pc, #824]	; (8005ae4 <__ieee754_pow+0x724>)
 80057aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80057ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80057b2:	429c      	cmp	r4, r3
 80057b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80057b8:	dd08      	ble.n	80057cc <__ieee754_pow+0x40c>
 80057ba:	4bcb      	ldr	r3, [pc, #812]	; (8005ae8 <__ieee754_pow+0x728>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	f340 815e 	ble.w	8005a7e <__ieee754_pow+0x6be>
 80057c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c4:	3301      	adds	r3, #1
 80057c6:	9309      	str	r3, [sp, #36]	; 0x24
 80057c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80057cc:	f04f 0a00 	mov.w	sl, #0
 80057d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80057d4:	930c      	str	r3, [sp, #48]	; 0x30
 80057d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057d8:	4bc4      	ldr	r3, [pc, #784]	; (8005aec <__ieee754_pow+0x72c>)
 80057da:	4413      	add	r3, r2
 80057dc:	ed93 7b00 	vldr	d7, [r3]
 80057e0:	4629      	mov	r1, r5
 80057e2:	ec53 2b17 	vmov	r2, r3, d7
 80057e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057ee:	f7fa fd43 	bl	8000278 <__aeabi_dsub>
 80057f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fe:	f7fa fd3d 	bl	800027c <__adddf3>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	2000      	movs	r0, #0
 8005808:	49b9      	ldr	r1, [pc, #740]	; (8005af0 <__ieee754_pow+0x730>)
 800580a:	f7fb f817 	bl	800083c <__aeabi_ddiv>
 800580e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa fee5 	bl	80005e8 <__aeabi_dmul>
 800581e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005822:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005826:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800582a:	2300      	movs	r3, #0
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005832:	106d      	asrs	r5, r5, #1
 8005834:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005838:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800583c:	2200      	movs	r2, #0
 800583e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005842:	4640      	mov	r0, r8
 8005844:	4649      	mov	r1, r9
 8005846:	4614      	mov	r4, r2
 8005848:	461d      	mov	r5, r3
 800584a:	f7fa fecd 	bl	80005e8 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	f7fa fd0f 	bl	8000278 <__aeabi_dsub>
 800585a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fd07 	bl	8000278 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005872:	f7fa fd01 	bl	8000278 <__aeabi_dsub>
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	f7fa feb5 	bl	80005e8 <__aeabi_dmul>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fa fcf7 	bl	8000278 <__aeabi_dsub>
 800588a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800588e:	f7fa feab 	bl	80005e8 <__aeabi_dmul>
 8005892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f7fa fea3 	bl	80005e8 <__aeabi_dmul>
 80058a2:	a37b      	add	r3, pc, #492	; (adr r3, 8005a90 <__ieee754_pow+0x6d0>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	4604      	mov	r4, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	f7fa fe9c 	bl	80005e8 <__aeabi_dmul>
 80058b0:	a379      	add	r3, pc, #484	; (adr r3, 8005a98 <__ieee754_pow+0x6d8>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f7fa fce1 	bl	800027c <__adddf3>
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	f7fa fe93 	bl	80005e8 <__aeabi_dmul>
 80058c2:	a377      	add	r3, pc, #476	; (adr r3, 8005aa0 <__ieee754_pow+0x6e0>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa fcd8 	bl	800027c <__adddf3>
 80058cc:	4622      	mov	r2, r4
 80058ce:	462b      	mov	r3, r5
 80058d0:	f7fa fe8a 	bl	80005e8 <__aeabi_dmul>
 80058d4:	a374      	add	r3, pc, #464	; (adr r3, 8005aa8 <__ieee754_pow+0x6e8>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fccf 	bl	800027c <__adddf3>
 80058de:	4622      	mov	r2, r4
 80058e0:	462b      	mov	r3, r5
 80058e2:	f7fa fe81 	bl	80005e8 <__aeabi_dmul>
 80058e6:	a372      	add	r3, pc, #456	; (adr r3, 8005ab0 <__ieee754_pow+0x6f0>)
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f7fa fcc6 	bl	800027c <__adddf3>
 80058f0:	4622      	mov	r2, r4
 80058f2:	462b      	mov	r3, r5
 80058f4:	f7fa fe78 	bl	80005e8 <__aeabi_dmul>
 80058f8:	a36f      	add	r3, pc, #444	; (adr r3, 8005ab8 <__ieee754_pow+0x6f8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fcbd 	bl	800027c <__adddf3>
 8005902:	4622      	mov	r2, r4
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	462b      	mov	r3, r5
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fa fe6b 	bl	80005e8 <__aeabi_dmul>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	f7fa fe65 	bl	80005e8 <__aeabi_dmul>
 800591e:	4642      	mov	r2, r8
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	464b      	mov	r3, r9
 8005926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592a:	f7fa fca7 	bl	800027c <__adddf3>
 800592e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005932:	f7fa fe59 	bl	80005e8 <__aeabi_dmul>
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	f7fa fc9f 	bl	800027c <__adddf3>
 800593e:	4642      	mov	r2, r8
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	464b      	mov	r3, r9
 8005946:	4640      	mov	r0, r8
 8005948:	4649      	mov	r1, r9
 800594a:	f7fa fe4d 	bl	80005e8 <__aeabi_dmul>
 800594e:	2200      	movs	r2, #0
 8005950:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <__ieee754_pow+0x734>)
 8005952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005956:	f7fa fc91 	bl	800027c <__adddf3>
 800595a:	4632      	mov	r2, r6
 800595c:	463b      	mov	r3, r7
 800595e:	f7fa fc8d 	bl	800027c <__adddf3>
 8005962:	9802      	ldr	r0, [sp, #8]
 8005964:	460d      	mov	r5, r1
 8005966:	4604      	mov	r4, r0
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fa fe3a 	bl	80005e8 <__aeabi_dmul>
 8005974:	2200      	movs	r2, #0
 8005976:	4680      	mov	r8, r0
 8005978:	4689      	mov	r9, r1
 800597a:	4b5e      	ldr	r3, [pc, #376]	; (8005af4 <__ieee754_pow+0x734>)
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fc7a 	bl	8000278 <__aeabi_dsub>
 8005984:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005988:	f7fa fc76 	bl	8000278 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4630      	mov	r0, r6
 8005992:	4639      	mov	r1, r7
 8005994:	f7fa fc70 	bl	8000278 <__aeabi_dsub>
 8005998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599c:	f7fa fe24 	bl	80005e8 <__aeabi_dmul>
 80059a0:	4622      	mov	r2, r4
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	462b      	mov	r3, r5
 80059a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ac:	f7fa fe1c 	bl	80005e8 <__aeabi_dmul>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fc60 	bl	800027c <__adddf3>
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fc58 	bl	800027c <__adddf3>
 80059cc:	9802      	ldr	r0, [sp, #8]
 80059ce:	a33c      	add	r3, pc, #240	; (adr r3, 8005ac0 <__ieee754_pow+0x700>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	4604      	mov	r4, r0
 80059d6:	460d      	mov	r5, r1
 80059d8:	f7fa fe06 	bl	80005e8 <__aeabi_dmul>
 80059dc:	4642      	mov	r2, r8
 80059de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059e2:	464b      	mov	r3, r9
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fa fc46 	bl	8000278 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fc40 	bl	8000278 <__aeabi_dsub>
 80059f8:	a333      	add	r3, pc, #204	; (adr r3, 8005ac8 <__ieee754_pow+0x708>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fdf3 	bl	80005e8 <__aeabi_dmul>
 8005a02:	a333      	add	r3, pc, #204	; (adr r3, 8005ad0 <__ieee754_pow+0x710>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fa fdea 	bl	80005e8 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fa fc2e 	bl	800027c <__adddf3>
 8005a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <__ieee754_pow+0x738>)
 8005a24:	4413      	add	r3, r2
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fc27 	bl	800027c <__adddf3>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a32:	460d      	mov	r5, r1
 8005a34:	f7fa fd6e 	bl	8000514 <__aeabi_i2d>
 8005a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <__ieee754_pow+0x73c>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a42:	4606      	mov	r6, r0
 8005a44:	460f      	mov	r7, r1
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a4e:	f7fa fc15 	bl	800027c <__adddf3>
 8005a52:	4642      	mov	r2, r8
 8005a54:	464b      	mov	r3, r9
 8005a56:	f7fa fc11 	bl	800027c <__adddf3>
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	f7fa fc0d 	bl	800027c <__adddf3>
 8005a62:	9802      	ldr	r0, [sp, #8]
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6c:	f7fa fc04 	bl	8000278 <__aeabi_dsub>
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	f7fa fc00 	bl	8000278 <__aeabi_dsub>
 8005a78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a7c:	e607      	b.n	800568e <__ieee754_pow+0x2ce>
 8005a7e:	f04f 0a01 	mov.w	sl, #1
 8005a82:	e6a5      	b.n	80057d0 <__ieee754_pow+0x410>
 8005a84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005ad8 <__ieee754_pow+0x718>
 8005a88:	e613      	b.n	80056b2 <__ieee754_pow+0x2f2>
 8005a8a:	bf00      	nop
 8005a8c:	f3af 8000 	nop.w
 8005a90:	4a454eef 	.word	0x4a454eef
 8005a94:	3fca7e28 	.word	0x3fca7e28
 8005a98:	93c9db65 	.word	0x93c9db65
 8005a9c:	3fcd864a 	.word	0x3fcd864a
 8005aa0:	a91d4101 	.word	0xa91d4101
 8005aa4:	3fd17460 	.word	0x3fd17460
 8005aa8:	518f264d 	.word	0x518f264d
 8005aac:	3fd55555 	.word	0x3fd55555
 8005ab0:	db6fabff 	.word	0xdb6fabff
 8005ab4:	3fdb6db6 	.word	0x3fdb6db6
 8005ab8:	33333303 	.word	0x33333303
 8005abc:	3fe33333 	.word	0x3fe33333
 8005ac0:	e0000000 	.word	0xe0000000
 8005ac4:	3feec709 	.word	0x3feec709
 8005ac8:	dc3a03fd 	.word	0xdc3a03fd
 8005acc:	3feec709 	.word	0x3feec709
 8005ad0:	145b01f5 	.word	0x145b01f5
 8005ad4:	be3e2fe0 	.word	0xbe3e2fe0
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	3ff00000 	.word	0x3ff00000
 8005ae0:	43400000 	.word	0x43400000
 8005ae4:	0003988e 	.word	0x0003988e
 8005ae8:	000bb679 	.word	0x000bb679
 8005aec:	08006260 	.word	0x08006260
 8005af0:	3ff00000 	.word	0x3ff00000
 8005af4:	40080000 	.word	0x40080000
 8005af8:	08006280 	.word	0x08006280
 8005afc:	08006270 	.word	0x08006270
 8005b00:	a3b4      	add	r3, pc, #720	; (adr r3, 8005dd4 <__ieee754_pow+0xa14>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fbb7 	bl	800027c <__adddf3>
 8005b0e:	4622      	mov	r2, r4
 8005b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b14:	462b      	mov	r3, r5
 8005b16:	4630      	mov	r0, r6
 8005b18:	4639      	mov	r1, r7
 8005b1a:	f7fa fbad 	bl	8000278 <__aeabi_dsub>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b26:	f7fa ffef 	bl	8000b08 <__aeabi_dcmpgt>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f47f adfe 	bne.w	800572c <__ieee754_pow+0x36c>
 8005b30:	4aa3      	ldr	r2, [pc, #652]	; (8005dc0 <__ieee754_pow+0xa00>)
 8005b32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b36:	4293      	cmp	r3, r2
 8005b38:	f340 810a 	ble.w	8005d50 <__ieee754_pow+0x990>
 8005b3c:	151b      	asrs	r3, r3, #20
 8005b3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005b42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005b46:	fa4a f303 	asr.w	r3, sl, r3
 8005b4a:	445b      	add	r3, fp
 8005b4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005b50:	4e9c      	ldr	r6, [pc, #624]	; (8005dc4 <__ieee754_pow+0xa04>)
 8005b52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b56:	4116      	asrs	r6, r2
 8005b58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	ea23 0106 	bic.w	r1, r3, r6
 8005b62:	f1c2 0214 	rsb	r2, r2, #20
 8005b66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005b6a:	fa4a fa02 	asr.w	sl, sl, r2
 8005b6e:	f1bb 0f00 	cmp.w	fp, #0
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4620      	mov	r0, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	bfb8      	it	lt
 8005b7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b80:	f7fa fb7a 	bl	8000278 <__aeabi_dsub>
 8005b84:	e9cd 0100 	strd	r0, r1, [sp]
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b90:	f7fa fb74 	bl	800027c <__adddf3>
 8005b94:	2000      	movs	r0, #0
 8005b96:	a378      	add	r3, pc, #480	; (adr r3, 8005d78 <__ieee754_pow+0x9b8>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	f7fa fd22 	bl	80005e8 <__aeabi_dmul>
 8005ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fb62 	bl	8000278 <__aeabi_dsub>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa fb5c 	bl	8000278 <__aeabi_dsub>
 8005bc0:	a36f      	add	r3, pc, #444	; (adr r3, 8005d80 <__ieee754_pow+0x9c0>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f7fa fd0f 	bl	80005e8 <__aeabi_dmul>
 8005bca:	a36f      	add	r3, pc, #444	; (adr r3, 8005d88 <__ieee754_pow+0x9c8>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	4689      	mov	r9, r1
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fd06 	bl	80005e8 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa fb4a 	bl	800027c <__adddf3>
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fb42 	bl	800027c <__adddf3>
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	4689      	mov	r9, r1
 8005c00:	f7fa fb3a 	bl	8000278 <__aeabi_dsub>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7fa fb34 	bl	8000278 <__aeabi_dsub>
 8005c10:	4642      	mov	r2, r8
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	464b      	mov	r3, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	f7fa fce4 	bl	80005e8 <__aeabi_dmul>
 8005c20:	a35b      	add	r3, pc, #364	; (adr r3, 8005d90 <__ieee754_pow+0x9d0>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4604      	mov	r4, r0
 8005c28:	460d      	mov	r5, r1
 8005c2a:	f7fa fcdd 	bl	80005e8 <__aeabi_dmul>
 8005c2e:	a35a      	add	r3, pc, #360	; (adr r3, 8005d98 <__ieee754_pow+0x9d8>)
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f7fa fb20 	bl	8000278 <__aeabi_dsub>
 8005c38:	4622      	mov	r2, r4
 8005c3a:	462b      	mov	r3, r5
 8005c3c:	f7fa fcd4 	bl	80005e8 <__aeabi_dmul>
 8005c40:	a357      	add	r3, pc, #348	; (adr r3, 8005da0 <__ieee754_pow+0x9e0>)
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f7fa fb19 	bl	800027c <__adddf3>
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	f7fa fccb 	bl	80005e8 <__aeabi_dmul>
 8005c52:	a355      	add	r3, pc, #340	; (adr r3, 8005da8 <__ieee754_pow+0x9e8>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f7fa fb0e 	bl	8000278 <__aeabi_dsub>
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	462b      	mov	r3, r5
 8005c60:	f7fa fcc2 	bl	80005e8 <__aeabi_dmul>
 8005c64:	a352      	add	r3, pc, #328	; (adr r3, 8005db0 <__ieee754_pow+0x9f0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fb07 	bl	800027c <__adddf3>
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	f7fa fcb9 	bl	80005e8 <__aeabi_dmul>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fafb 	bl	8000278 <__aeabi_dsub>
 8005c82:	4604      	mov	r4, r0
 8005c84:	460d      	mov	r5, r1
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	f7fa fcab 	bl	80005e8 <__aeabi_dmul>
 8005c92:	2200      	movs	r2, #0
 8005c94:	e9cd 0100 	strd	r0, r1, [sp]
 8005c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa faea 	bl	8000278 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cac:	f7fa fdc6 	bl	800083c <__aeabi_ddiv>
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa fc94 	bl	80005e8 <__aeabi_dmul>
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	f7fa fada 	bl	800027c <__adddf3>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fad2 	bl	8000278 <__aeabi_dsub>
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	f7fa face 	bl	8000278 <__aeabi_dsub>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	4939      	ldr	r1, [pc, #228]	; (8005dc8 <__ieee754_pow+0xa08>)
 8005ce4:	f7fa fac8 	bl	8000278 <__aeabi_dsub>
 8005ce8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005cec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	da2f      	bge.n	8005d56 <__ieee754_pow+0x996>
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	ec43 2b10 	vmov	d0, r2, r3
 8005cfc:	f000 f9b4 	bl	8006068 <scalbn>
 8005d00:	ec51 0b10 	vmov	r0, r1, d0
 8005d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d08:	f7ff bbf1 	b.w	80054ee <__ieee754_pow+0x12e>
 8005d0c:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <__ieee754_pow+0xa0c>)
 8005d0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005d12:	429e      	cmp	r6, r3
 8005d14:	f77f af0c 	ble.w	8005b30 <__ieee754_pow+0x770>
 8005d18:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <__ieee754_pow+0xa10>)
 8005d1a:	440b      	add	r3, r1
 8005d1c:	4303      	orrs	r3, r0
 8005d1e:	d00b      	beq.n	8005d38 <__ieee754_pow+0x978>
 8005d20:	a325      	add	r3, pc, #148	; (adr r3, 8005db8 <__ieee754_pow+0x9f8>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2a:	f7fa fc5d 	bl	80005e8 <__aeabi_dmul>
 8005d2e:	a322      	add	r3, pc, #136	; (adr r3, 8005db8 <__ieee754_pow+0x9f8>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7ff bbdb 	b.w	80054ee <__ieee754_pow+0x12e>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	f7fa fa9c 	bl	8000278 <__aeabi_dsub>
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	f7fa fed6 	bl	8000af4 <__aeabi_dcmpge>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f43f aef1 	beq.w	8005b30 <__ieee754_pow+0x770>
 8005d4e:	e7e7      	b.n	8005d20 <__ieee754_pow+0x960>
 8005d50:	f04f 0a00 	mov.w	sl, #0
 8005d54:	e718      	b.n	8005b88 <__ieee754_pow+0x7c8>
 8005d56:	4621      	mov	r1, r4
 8005d58:	e7d4      	b.n	8005d04 <__ieee754_pow+0x944>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	491a      	ldr	r1, [pc, #104]	; (8005dc8 <__ieee754_pow+0xa08>)
 8005d5e:	f7ff bb8f 	b.w	8005480 <__ieee754_pow+0xc0>
 8005d62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d66:	f7ff bb8b 	b.w	8005480 <__ieee754_pow+0xc0>
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	f7ff bb87 	b.w	8005480 <__ieee754_pow+0xc0>
 8005d72:	4693      	mov	fp, r2
 8005d74:	f7ff bb98 	b.w	80054a8 <__ieee754_pow+0xe8>
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	3fe62e43 	.word	0x3fe62e43
 8005d80:	fefa39ef 	.word	0xfefa39ef
 8005d84:	3fe62e42 	.word	0x3fe62e42
 8005d88:	0ca86c39 	.word	0x0ca86c39
 8005d8c:	be205c61 	.word	0xbe205c61
 8005d90:	72bea4d0 	.word	0x72bea4d0
 8005d94:	3e663769 	.word	0x3e663769
 8005d98:	c5d26bf1 	.word	0xc5d26bf1
 8005d9c:	3ebbbd41 	.word	0x3ebbbd41
 8005da0:	af25de2c 	.word	0xaf25de2c
 8005da4:	3f11566a 	.word	0x3f11566a
 8005da8:	16bebd93 	.word	0x16bebd93
 8005dac:	3f66c16c 	.word	0x3f66c16c
 8005db0:	5555553e 	.word	0x5555553e
 8005db4:	3fc55555 	.word	0x3fc55555
 8005db8:	c2f8f359 	.word	0xc2f8f359
 8005dbc:	01a56e1f 	.word	0x01a56e1f
 8005dc0:	3fe00000 	.word	0x3fe00000
 8005dc4:	000fffff 	.word	0x000fffff
 8005dc8:	3ff00000 	.word	0x3ff00000
 8005dcc:	4090cbff 	.word	0x4090cbff
 8005dd0:	3f6f3400 	.word	0x3f6f3400
 8005dd4:	652b82fe 	.word	0x652b82fe
 8005dd8:	3c971547 	.word	0x3c971547

08005ddc <__ieee754_sqrt>:
 8005ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de0:	4955      	ldr	r1, [pc, #340]	; (8005f38 <__ieee754_sqrt+0x15c>)
 8005de2:	ec55 4b10 	vmov	r4, r5, d0
 8005de6:	43a9      	bics	r1, r5
 8005de8:	462b      	mov	r3, r5
 8005dea:	462a      	mov	r2, r5
 8005dec:	d112      	bne.n	8005e14 <__ieee754_sqrt+0x38>
 8005dee:	ee10 2a10 	vmov	r2, s0
 8005df2:	ee10 0a10 	vmov	r0, s0
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fbf6 	bl	80005e8 <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7fa fa3a 	bl	800027c <__adddf3>
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	ec45 4b10 	vmov	d0, r4, r5
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	ee10 0a10 	vmov	r0, s0
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	dc0f      	bgt.n	8005e3e <__ieee754_sqrt+0x62>
 8005e1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005e22:	4330      	orrs	r0, r6
 8005e24:	d0f2      	beq.n	8005e0c <__ieee754_sqrt+0x30>
 8005e26:	b155      	cbz	r5, 8005e3e <__ieee754_sqrt+0x62>
 8005e28:	ee10 2a10 	vmov	r2, s0
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fa22 	bl	8000278 <__aeabi_dsub>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	f7fa fd00 	bl	800083c <__aeabi_ddiv>
 8005e3c:	e7e4      	b.n	8005e08 <__ieee754_sqrt+0x2c>
 8005e3e:	151b      	asrs	r3, r3, #20
 8005e40:	d073      	beq.n	8005f2a <__ieee754_sqrt+0x14e>
 8005e42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e46:	07dd      	lsls	r5, r3, #31
 8005e48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e4c:	bf48      	it	mi
 8005e4e:	0fc8      	lsrmi	r0, r1, #31
 8005e50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e54:	bf44      	itt	mi
 8005e56:	0049      	lslmi	r1, r1, #1
 8005e58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	1058      	asrs	r0, r3, #1
 8005e60:	0fcb      	lsrs	r3, r1, #31
 8005e62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005e66:	0049      	lsls	r1, r1, #1
 8005e68:	2316      	movs	r3, #22
 8005e6a:	462c      	mov	r4, r5
 8005e6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005e70:	19a7      	adds	r7, r4, r6
 8005e72:	4297      	cmp	r7, r2
 8005e74:	bfde      	ittt	le
 8005e76:	19bc      	addle	r4, r7, r6
 8005e78:	1bd2      	suble	r2, r2, r7
 8005e7a:	19ad      	addle	r5, r5, r6
 8005e7c:	0fcf      	lsrs	r7, r1, #31
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005e84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e8c:	d1f0      	bne.n	8005e70 <__ieee754_sqrt+0x94>
 8005e8e:	f04f 0c20 	mov.w	ip, #32
 8005e92:	469e      	mov	lr, r3
 8005e94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e98:	42a2      	cmp	r2, r4
 8005e9a:	eb06 070e 	add.w	r7, r6, lr
 8005e9e:	dc02      	bgt.n	8005ea6 <__ieee754_sqrt+0xca>
 8005ea0:	d112      	bne.n	8005ec8 <__ieee754_sqrt+0xec>
 8005ea2:	428f      	cmp	r7, r1
 8005ea4:	d810      	bhi.n	8005ec8 <__ieee754_sqrt+0xec>
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	eb07 0e06 	add.w	lr, r7, r6
 8005eac:	da42      	bge.n	8005f34 <__ieee754_sqrt+0x158>
 8005eae:	f1be 0f00 	cmp.w	lr, #0
 8005eb2:	db3f      	blt.n	8005f34 <__ieee754_sqrt+0x158>
 8005eb4:	f104 0801 	add.w	r8, r4, #1
 8005eb8:	1b12      	subs	r2, r2, r4
 8005eba:	428f      	cmp	r7, r1
 8005ebc:	bf88      	it	hi
 8005ebe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005ec2:	1bc9      	subs	r1, r1, r7
 8005ec4:	4433      	add	r3, r6
 8005ec6:	4644      	mov	r4, r8
 8005ec8:	0052      	lsls	r2, r2, #1
 8005eca:	f1bc 0c01 	subs.w	ip, ip, #1
 8005ece:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005ed2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005ed6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005eda:	d1dd      	bne.n	8005e98 <__ieee754_sqrt+0xbc>
 8005edc:	430a      	orrs	r2, r1
 8005ede:	d006      	beq.n	8005eee <__ieee754_sqrt+0x112>
 8005ee0:	1c5c      	adds	r4, r3, #1
 8005ee2:	bf13      	iteet	ne
 8005ee4:	3301      	addne	r3, #1
 8005ee6:	3501      	addeq	r5, #1
 8005ee8:	4663      	moveq	r3, ip
 8005eea:	f023 0301 	bicne.w	r3, r3, #1
 8005eee:	106a      	asrs	r2, r5, #1
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	07e9      	lsls	r1, r5, #31
 8005ef4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005ef8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005efc:	bf48      	it	mi
 8005efe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005f02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005f06:	461c      	mov	r4, r3
 8005f08:	e780      	b.n	8005e0c <__ieee754_sqrt+0x30>
 8005f0a:	0aca      	lsrs	r2, r1, #11
 8005f0c:	3815      	subs	r0, #21
 8005f0e:	0549      	lsls	r1, r1, #21
 8005f10:	2a00      	cmp	r2, #0
 8005f12:	d0fa      	beq.n	8005f0a <__ieee754_sqrt+0x12e>
 8005f14:	02d6      	lsls	r6, r2, #11
 8005f16:	d50a      	bpl.n	8005f2e <__ieee754_sqrt+0x152>
 8005f18:	f1c3 0420 	rsb	r4, r3, #32
 8005f1c:	fa21 f404 	lsr.w	r4, r1, r4
 8005f20:	1e5d      	subs	r5, r3, #1
 8005f22:	4099      	lsls	r1, r3
 8005f24:	4322      	orrs	r2, r4
 8005f26:	1b43      	subs	r3, r0, r5
 8005f28:	e78b      	b.n	8005e42 <__ieee754_sqrt+0x66>
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	e7f0      	b.n	8005f10 <__ieee754_sqrt+0x134>
 8005f2e:	0052      	lsls	r2, r2, #1
 8005f30:	3301      	adds	r3, #1
 8005f32:	e7ef      	b.n	8005f14 <__ieee754_sqrt+0x138>
 8005f34:	46a0      	mov	r8, r4
 8005f36:	e7bf      	b.n	8005eb8 <__ieee754_sqrt+0xdc>
 8005f38:	7ff00000 	.word	0x7ff00000

08005f3c <finite>:
 8005f3c:	ee10 3a90 	vmov	r3, s1
 8005f40:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005f44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f48:	0fc0      	lsrs	r0, r0, #31
 8005f4a:	4770      	bx	lr

08005f4c <matherr>:
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	4770      	bx	lr

08005f50 <nan>:
 8005f50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005f58 <nan+0x8>
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	7ff80000 	.word	0x7ff80000

08005f60 <rint>:
 8005f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f62:	ec51 0b10 	vmov	r0, r1, d0
 8005f66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f6a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005f6e:	2e13      	cmp	r6, #19
 8005f70:	460b      	mov	r3, r1
 8005f72:	ee10 4a10 	vmov	r4, s0
 8005f76:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005f7a:	dc56      	bgt.n	800602a <rint+0xca>
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	da2b      	bge.n	8005fd8 <rint+0x78>
 8005f80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005f84:	4302      	orrs	r2, r0
 8005f86:	d023      	beq.n	8005fd0 <rint+0x70>
 8005f88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005f8c:	4302      	orrs	r2, r0
 8005f8e:	4254      	negs	r4, r2
 8005f90:	4314      	orrs	r4, r2
 8005f92:	0c4b      	lsrs	r3, r1, #17
 8005f94:	0b24      	lsrs	r4, r4, #12
 8005f96:	045b      	lsls	r3, r3, #17
 8005f98:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005f9c:	ea44 0103 	orr.w	r1, r4, r3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	492f      	ldr	r1, [pc, #188]	; (8006060 <rint+0x100>)
 8005fa4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005fa8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005fac:	4602      	mov	r2, r0
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7fa f963 	bl	800027c <__adddf3>
 8005fb6:	e9cd 0100 	strd	r0, r1, [sp]
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc2:	f7fa f959 	bl	8000278 <__aeabi_dsub>
 8005fc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005fce:	4639      	mov	r1, r7
 8005fd0:	ec41 0b10 	vmov	d0, r0, r1
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <rint+0x104>)
 8005fda:	4132      	asrs	r2, r6
 8005fdc:	ea01 0702 	and.w	r7, r1, r2
 8005fe0:	4307      	orrs	r7, r0
 8005fe2:	d0f5      	beq.n	8005fd0 <rint+0x70>
 8005fe4:	0852      	lsrs	r2, r2, #1
 8005fe6:	4011      	ands	r1, r2
 8005fe8:	430c      	orrs	r4, r1
 8005fea:	d00b      	beq.n	8006004 <rint+0xa4>
 8005fec:	ea23 0202 	bic.w	r2, r3, r2
 8005ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ff4:	2e13      	cmp	r6, #19
 8005ff6:	fa43 f306 	asr.w	r3, r3, r6
 8005ffa:	bf0c      	ite	eq
 8005ffc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006000:	2400      	movne	r4, #0
 8006002:	4313      	orrs	r3, r2
 8006004:	4916      	ldr	r1, [pc, #88]	; (8006060 <rint+0x100>)
 8006006:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800600a:	4622      	mov	r2, r4
 800600c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa f932 	bl	800027c <__adddf3>
 8006018:	e9cd 0100 	strd	r0, r1, [sp]
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006024:	f7fa f928 	bl	8000278 <__aeabi_dsub>
 8006028:	e7d2      	b.n	8005fd0 <rint+0x70>
 800602a:	2e33      	cmp	r6, #51	; 0x33
 800602c:	dd07      	ble.n	800603e <rint+0xde>
 800602e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006032:	d1cd      	bne.n	8005fd0 <rint+0x70>
 8006034:	ee10 2a10 	vmov	r2, s0
 8006038:	f7fa f920 	bl	800027c <__adddf3>
 800603c:	e7c8      	b.n	8005fd0 <rint+0x70>
 800603e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	40f2      	lsrs	r2, r6
 8006048:	4210      	tst	r0, r2
 800604a:	d0c1      	beq.n	8005fd0 <rint+0x70>
 800604c:	0852      	lsrs	r2, r2, #1
 800604e:	4210      	tst	r0, r2
 8006050:	bf1f      	itttt	ne
 8006052:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006056:	ea20 0202 	bicne.w	r2, r0, r2
 800605a:	4134      	asrne	r4, r6
 800605c:	4314      	orrne	r4, r2
 800605e:	e7d1      	b.n	8006004 <rint+0xa4>
 8006060:	08006290 	.word	0x08006290
 8006064:	000fffff 	.word	0x000fffff

08006068 <scalbn>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	ec55 4b10 	vmov	r4, r5, d0
 800606e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006072:	4606      	mov	r6, r0
 8006074:	462b      	mov	r3, r5
 8006076:	b9aa      	cbnz	r2, 80060a4 <scalbn+0x3c>
 8006078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800607c:	4323      	orrs	r3, r4
 800607e:	d03b      	beq.n	80060f8 <scalbn+0x90>
 8006080:	4b31      	ldr	r3, [pc, #196]	; (8006148 <scalbn+0xe0>)
 8006082:	4629      	mov	r1, r5
 8006084:	2200      	movs	r2, #0
 8006086:	ee10 0a10 	vmov	r0, s0
 800608a:	f7fa faad 	bl	80005e8 <__aeabi_dmul>
 800608e:	4b2f      	ldr	r3, [pc, #188]	; (800614c <scalbn+0xe4>)
 8006090:	429e      	cmp	r6, r3
 8006092:	4604      	mov	r4, r0
 8006094:	460d      	mov	r5, r1
 8006096:	da12      	bge.n	80060be <scalbn+0x56>
 8006098:	a327      	add	r3, pc, #156	; (adr r3, 8006138 <scalbn+0xd0>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa faa3 	bl	80005e8 <__aeabi_dmul>
 80060a2:	e009      	b.n	80060b8 <scalbn+0x50>
 80060a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80060a8:	428a      	cmp	r2, r1
 80060aa:	d10c      	bne.n	80060c6 <scalbn+0x5e>
 80060ac:	ee10 2a10 	vmov	r2, s0
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa f8e2 	bl	800027c <__adddf3>
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	e01c      	b.n	80060f8 <scalbn+0x90>
 80060be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060c2:	460b      	mov	r3, r1
 80060c4:	3a36      	subs	r2, #54	; 0x36
 80060c6:	4432      	add	r2, r6
 80060c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060cc:	428a      	cmp	r2, r1
 80060ce:	dd0b      	ble.n	80060e8 <scalbn+0x80>
 80060d0:	ec45 4b11 	vmov	d1, r4, r5
 80060d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006140 <scalbn+0xd8>
 80060d8:	f000 f83c 	bl	8006154 <copysign>
 80060dc:	a318      	add	r3, pc, #96	; (adr r3, 8006140 <scalbn+0xd8>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	ec51 0b10 	vmov	r0, r1, d0
 80060e6:	e7da      	b.n	800609e <scalbn+0x36>
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	dd08      	ble.n	80060fe <scalbn+0x96>
 80060ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060f8:	ec45 4b10 	vmov	d0, r4, r5
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006102:	da0d      	bge.n	8006120 <scalbn+0xb8>
 8006104:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006108:	429e      	cmp	r6, r3
 800610a:	ec45 4b11 	vmov	d1, r4, r5
 800610e:	dce1      	bgt.n	80060d4 <scalbn+0x6c>
 8006110:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006138 <scalbn+0xd0>
 8006114:	f000 f81e 	bl	8006154 <copysign>
 8006118:	a307      	add	r3, pc, #28	; (adr r3, 8006138 <scalbn+0xd0>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	e7e0      	b.n	80060e2 <scalbn+0x7a>
 8006120:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006124:	3236      	adds	r2, #54	; 0x36
 8006126:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800612a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	2200      	movs	r2, #0
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <scalbn+0xe8>)
 8006136:	e7b2      	b.n	800609e <scalbn+0x36>
 8006138:	c2f8f359 	.word	0xc2f8f359
 800613c:	01a56e1f 	.word	0x01a56e1f
 8006140:	8800759c 	.word	0x8800759c
 8006144:	7e37e43c 	.word	0x7e37e43c
 8006148:	43500000 	.word	0x43500000
 800614c:	ffff3cb0 	.word	0xffff3cb0
 8006150:	3c900000 	.word	0x3c900000

08006154 <copysign>:
 8006154:	ec51 0b10 	vmov	r0, r1, d0
 8006158:	ee11 0a90 	vmov	r0, s3
 800615c:	ee10 2a10 	vmov	r2, s0
 8006160:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006164:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006168:	ea41 0300 	orr.w	r3, r1, r0
 800616c:	ec43 2b10 	vmov	d0, r2, r3
 8006170:	4770      	bx	lr
	...

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
